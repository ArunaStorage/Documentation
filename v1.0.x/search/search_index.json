{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":"<p>Welcome to the general documentation for the Aruna Object Storage (AOS).</p> <p>This documentation includes theoretical concepts, the internal data structure, the entity-relationship model, a basic usage guide, some generic user story playbooks, and much more in the future.</p> <p>Deeper technical documentation can be found in the implementation repositories for the API, Server or CLI. Details on the individual structures can be found in the API documentation and/or the Data Structure part of this documentation.</p> <p> </p> <p>UML diagram of the Aruna Object Storage data structure. A more detailed description of the individual parts can be found here.</p>"},{"location":"#aos-components","title":"AOS Components","text":""},{"location":"#aos-api","title":"AOS API","text":"<p>Main Aruna API repository</p> <p>The API is designed generally with Google Protocol Buffers. With the release of a new API version, the client libraries are automatically compiled and updated to the latest version. The API is fundamentally backwards compatible, which means that users' applications will continue to work as usual before they also decide to move to the new version.</p> <ul> <li>Rust API stubs: GitHub or crates.io</li> <li>Go API stubs: GitHub</li> <li>Python API stubs: GitHub or PyPI</li> <li>Java API stubs: GitHub</li> </ul>"},{"location":"#aos-server","title":"AOS Server","text":"<p>Main Aruna Server repository</p> <p>The implementation of the API that handles the incoming requests.</p> <p>Aruna Object Storage is data lake application with API that manages scientific data objects according to FAIR principles. It interacts with multiple data storage backends (e.g. S3, File ...) via the DataProxy application and stores a rich and queryable set of metadata about stored objects in a postgres compatible database (e.g. CockroachDB). Aruna is conceptually geo-redundant with multiple dataset and database locations. Users can choose where and how to store their data.</p>"},{"location":"#aos-data-proxy","title":"AOS Data Proxy","text":"<p>Main Aruna Data Proxy repository</p> <p>This is the internal server implementation handling the communication between the data storage backend used for the specific AOS instance.</p> <p>The DataProxy service is designed to handle data transfers AOS. It starts two server: One server implements the internal proxy api from the official AOS gRPC API.  The other server handles the transfer of the actual data. All data access is handled through presigned URLs.</p>"},{"location":"#aos-cli","title":"AOS CLI","text":"<p>Main Aruna CLI repository</p> <p>This is a simple CLI application for the ScienceObjectsDB API.  Its currently work in progress and will be developed along with the API. Neither concept nor implementation are final.</p>"},{"location":"#notification-system","title":"Notification system","text":"<p>The storage system has a notification system that can be used to receive change notification on specific resources.</p> <p>The notification system is currently still in the implementation phase but will be available soon.</p>"},{"location":"#implementation-design-trivia","title":"Implementation Design Trivia","text":"<ul> <li>An RDBMS will be used as database backend for the AOS Server</li> <li>The AOS Server, Data Proxy nd CLI will be implemented in Rust</li> <li>The base API interface will be defined using Protocol Buffers</li> <li>All endpoints work with JSON over HTTP just as they do with requests made via gRPC from individual clients</li> <li>Clients stubs will be generated for major programming languages on every API release</li> <li>A basic CLI client will be offered to simplify the usage entry barrier</li> <li>A web UI is available for demonstration purposes</li> </ul>"},{"location":"concepts/multicloud/Intro/","title":"Intro","text":"<pre><code>    flowchart TB;\n        Middleware &lt;--&gt; APIA\n        Middleware &lt;--&gt; APIB\n        Middleware &lt;--&gt; APIC\n    subgraph Datacenter[Datacenter A]\n        direction BT;\n            subgraph StorageEngine[StorageEngine]\n                direction BT;\n                APIA[API]\n            end\n        APIA[API]--&gt;StorageA[(Storage)];\n        APIA[API]--&gt;ComputeA[Compute];\n    end\n    subgraph Datacenter[Datacenter B]\n        direction BT;\n            subgraph StorageEngine[StorageEngine]\n                direction BT;\n                APIB[API]\n            end\n        APIB[API]--&gt;StorageB[(Storage)];\n        APIB[API]--&gt;ComputeB[Compute];\n    end\n    subgraph Datacenter C\n        APIC[API]--&gt;StorageC[(Storage)];\n        APIC[API]--&gt;ComputeC[Compute];\n    end\n\n    style Datacenter fill:#377baf\n    style StorageEngine fill:#215074\n</code></pre>"},{"location":"generic_playbooks/","title":"Introduction","text":"<p>In the future, this section will contain generic playbooks that cover simple user stories or even complete use cases.</p> <p>All steps will be covered in detail, from the creation and management of the individual components, to sensible rights management, to tips and tricks to save unnecessary work.</p> <p>Stay tuned </p>"},{"location":"get_started/basic_usage/00_index/","title":"Basic Usage","text":"<p>This section deals with the basics of using Aruna Object Storage (AOS).  The first step is a basic introduction on how to get access to the storage system.  In addition, there is a simple tutorial on how to connect to the gRPC gateway of an AOS instance using the client API packages and initialize the individual client services.  However, this addition is only relevant if you plan to use one of the gRPC clients.</p> <p>Finally, the next sections deal with the individual resource client services.  The most basic operations are explained and each is presented with minimalistic examples for isolated use.</p> <p>The individual sections can be selected in the navigation on the left or run through individually via the footer.</p> <p>Let's get started </p>"},{"location":"get_started/basic_usage/01_Get-Storage-Access/","title":"Get Storage Access","text":""},{"location":"get_started/basic_usage/01_Get-Storage-Access/#introduction","title":"Introduction","text":"<p>For the general access a registered account within the official NFDI/FAIR-DS AAI is needed to obtain a valid OIDC token from one of those.</p> <p>After login, you can use your OIDC token to register yourself at an AOS instance.  To create/modify resources within the given scope/permissions you have to generate API token(s) after you have been activated by an AOS instance administrator.</p> <p>Please note that these following tutorials cover only the most basic operations.  For a complete list of the public API endpoints, their matching requests and responses, please refer to our Aruna Object Storage REST API Swagger-UI.</p>"},{"location":"get_started/basic_usage/01_Get-Storage-Access/#client-creation","title":"Client Creation","text":"<p>If you plan to send your requests through gRPC the first step is to open a connection to the gRPC gateway of the server you want to send the requests to.</p> <p>The presence of a client connection to the specific resource service is required for all further requests in this tutorial if the requests are send via gRPC.</p> <p>Danger</p> <p>These are minimal reproducible examples only for demonstration purposes which should not be used 'as-is' in a production environment!</p>  Rust Python Python (simple) <p>To use the Rust API library you have to set it as dependency <code>aruna-rust-api = \"&lt;Aruna-Rust-API-Version&gt;\"</code> in the <code>cargo.toml</code> of your project.</p> <pre><code>use aruna_rust_api::api::aruna::api::storage::services::v1::{\nuser_service_client,\nproject_service_client,\ncollection_service_client,\nobject_service_client,\nobject_group_service_client,\n}\nuse std::sync::Arc;\nuse tonic::codegen::InterceptedService;\nuse tonic::metadata::{AsciiMetadataKey, AsciiMetadataValue};\nuse tonic::transport::{Channel, ClientTlsConfig};\n\n// Create a client interceptor which always adds the specified api token to the request header\n#[derive(Clone)]\npub struct ClientInterceptor {\napi_token: String,\n}\n// Implement a request interceptor which always adds \n//  the authorization header with a specific API token to all requests\nimpl tonic::service::Interceptor for ClientInterceptor {\nfn call(&amp;mut self, request: tonic::Request&lt;()&gt;) -&gt; Result&lt;tonic::Request&lt;()&gt;, tonic::Status&gt; {\nlet mut mut_req: tonic::Request&lt;()&gt; = request;\nlet metadata = mut_req.metadata_mut();\nmetadata.append(\nAsciiMetadataKey::from_bytes(\"authorization\".as_bytes()).unwrap(),\nAsciiMetadataValue::try_from(format!(\"Bearer {}\", self.api_token.as_str())).unwrap(),\n);\n\nreturn Ok(mut_req);\n}\n}\n\nfn main() {\n// Create connection to AOS instance gRPC gateway\nlet api_token   = \"MySecretArunaApiToken\".to_string();\nlet tls_config  = ClientTlsConfig::new();\nlet endpoint    = Channel::from_shared(\"https://&lt;URL-To-AOS-Instance-gRPC-Gateway&gt;\").unwrap().tls_config(tls_config).unwrap();\nlet channel     = endpoint.connect().await.unwrap();\nlet interceptor = ClientInterceptor { api_token: api_token.clone() };\n\n// Create the individual client services\nlet mut user_client         = user_service_client::UserServiceClient::with_interceptor(channel.clone(), interceptor.clone());\nlet mut project_client      = project_service_client::ProjectServiceClient::with_interceptor(channel.clone(), interceptor.clone());\nlet mut collection_client   = collection_service_client::CollectionServiceClient::with_interceptor(channel.clone(), interceptor.clone());\nlet mut object_client       = object_service_client::ObjectServiceClient::with_interceptor(channel.clone(), interceptor.clone());\nlet mut object_group_client = object_group_service_client::ObjectGroupServiceClient::with_interceptor(channel.clone(), interceptor.clone());\n\n// Do something with the client services ...\n}\n</code></pre> <p>To use the Python API library in your Python project you have to install the PyPI package: <code>pip install Aruna-Python-API</code>.</p> <p>Note</p> <p>This example additionally implements an interceptor which adds the authorization token automatically to each request send by the service clients.</p> <p>It is a little more complicated and extra work up front but offers the advantage of having to worry less about the correct API token request metadata later.</p> <p>All Python examples in this documentation assume that the client services have been initialized with an interceptor.</p> <pre><code>import collections\nimport grpc\n\nfrom aruna.api.storage.services.v1.collection_service_pb2_grpc import CollectionServiceStub\nfrom aruna.api.storage.services.v1.object_service_pb2_grpc import ObjectServiceStub\nfrom aruna.api.storage.services.v1.objectgroup_service_pb2_grpc import ObjectGroupServiceStub\nfrom aruna.api.storage.services.v1.project_service_pb2_grpc import ProjectServiceStub\nfrom aruna.api.storage.services.v1.user_service_pb2_grpc import UserServiceStub\n\n# Valid Aruna API token\n#   In a production environment this should be stored in a more secure location ...\nAPI_TOKEN = 'MySecretArunaApiToken'\n\n# AOS instance gRPC gateway endpoint\nAOS_HOST = '&lt;URL-To-AOS-Instance-gRPC-Gateway&gt;' # Protocol (e.g. https://) has to be omitted\nAOS_PORT = '443'\n\n\nclass _MyAuthInterceptor(grpc.UnaryUnaryClientInterceptor):\n\"\"\"\n    Implement abstract class grpc.UnaryUnaryClientInterceptor to extend request metadata.\n    \"\"\"\n    def intercept_unary_unary(self, continuation, client_call_details, request):\n        # Append authorization token to request metadata\n        metadata = []\n        if client_call_details.metadata is not None:\n           metadata = list(client_call_details.metadata)\n        metadata.append(('authorization', f'Bearer {API_TOKEN}'))\n\n        # Continue with new client call details\n        request_iterator = iter((request,))\n        updated_details = _ClientCallDetails(\n            client_call_details.method, client_call_details.timeout, \n            metadata, client_call_details.credentials\n        )\n\n        return continuation(updated_details, next(request_iterator))\n\n\nclass _ClientCallDetails(\n        collections.namedtuple(\n            '_ClientCallDetails',\n            ('method', 'timeout', 'metadata', 'credentials')),\n        grpc.ClientCallDetails):\n\"\"\"\n    Implement grpc.ClientCallDetails to pass modified request details in interceptor.\n    \"\"\"\n    pass\n\n\nclass AosClient(object):\n\"\"\"\n     Class to contain the AOS gRPC client service stubs for easier usage.\n    \"\"\"\n    def __init__(self, ):\n        ssl_credentials = grpc.ssl_channel_credentials()\n        self.secure_channel = grpc.secure_channel(\"{}:{}\".format(AOS_HOST, AOS_PORT), ssl_credentials)\n        self.intercept_channel = grpc.intercept_channel(self.secure_channel, _MyAuthInterceptor())\n\n        self.user_client = UserServiceStub(self.intercept_channel)\n        self.project_client = ProjectServiceStub(self.intercept_channel)\n        self.collection_client = CollectionServiceStub(self.intercept_channel)\n        self.object_client = ObjectServiceStub(self.intercept_channel)\n        self.object_group_client = ObjectGroupServiceStub(self.intercept_channel)\n\n\n# Entry point of the script\nif __name__ == '__main__':\n    # Instantiate AosClient\n    client = AosClient()\n\n    # Do something with the client services ...\n</code></pre> <p>To use the Python API library in your Python project you have to install the PyPI package: <code>pip install Aruna-Python-API</code>.</p> <p>Note</p> <p>This example does not consider adding the authorization token metadata to every request. </p> <p>In this case you have to manually add the authorization token header by using the <code>with_call(...)</code> extension of the client service methods.</p> <p>All Python examples in this documentation assume that the client services have been initialized with an interceptor.</p> <pre><code>import grpc\n\nfrom aruna.api.storage.services.v1.collection_service_pb2_grpc import CollectionServiceStub\nfrom aruna.api.storage.services.v1.object_service_pb2_grpc import ObjectServiceStub\nfrom aruna.api.storage.services.v1.objectgroup_service_pb2_grpc import ObjectGroupServiceStub\nfrom aruna.api.storage.services.v1.project_service_pb2_grpc import ProjectServiceStub\nfrom aruna.api.storage.services.v1.user_service_pb2_grpc import UserServiceStub\n\n# Valid Aruna API token\n#   In a production environment this should be stored in a more secure location ...\nAPI_TOKEN = 'MySecretArunaApiToken'\n\n# AOS instance gRPC gateway endpoint\nAOS_HOST = '&lt;URL-To-AOS-Instance-gRPC-Gateway&gt;' # Protocol (e.g. https://) has to be omitted\nAOS_PORT = '443'\n\n\nclass AosClient(object):\n\"\"\"\n    Class to contain the AOS gRPC client service stubs for easier usage.\n    \"\"\"\n    def __init__(self):\n        # Read TLS credentials from local trusted certificates and instantiate a channel\n        ssl_credentials = grpc.ssl_channel_credentials()\n        self.channel    = grpc.secure_channel(\"{}:{}\".format(AOS_HOST, AOS_PORT), ssl_credentials)\n\n        self.user_client = UserServiceStub(self.channel)\n        self.project_client = ProjectServiceStub(self.channel)\n        self.collection_client = CollectionServiceStub(self.channel)\n        self.object_client = ObjectServiceStub(self.channel)\n        self.object_group_client = ObjectGroupServiceStub(self.channel)\n\n\n# Entry point of the Python script\nif __name__ == '__main__':\n    # Instantiate AosClient\n    client = AosClient()\n\n    # Do something with the client services ...\n</code></pre>"},{"location":"get_started/basic_usage/01_Get-Storage-Access/#user-registration","title":"User registration","text":"<p>Users can register themselves with an individual display name in an AOS instance with their valid OIDC token received from the AAI login.</p>  cURL Rust Python <pre><code># Native JSON request to register OIDC user\ncurl -d '\n  {\n    \"display_name\": \"Forename Surname\"\n  }' \\\n-H \"Authorization: Bearer &lt;OIDC_TOKEN&gt;\" \\\n-H \"Content-Type: application/json\" \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/auth/register\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to register OIDC user\nlet register_request = RegisterUserRequest {\ndisplay_name: \"John Doe\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = user_client.register_user(register_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"Registered user: {:#?}\", response.user_id)\n</code></pre> <pre><code># Create tonic/ArunaAPI request to register OIDC user\nrequest = RegisterUserRequest(\n    display_name=\"John Doe\"\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.user_client.RegisterUser(\n    request=request,\n    metadata=(('authorization', f'Bearer {OIDC_TOKEN}'),)\n)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/01_Get-Storage-Access/#user-activation","title":"User activation","text":"<p>Note</p> <p>Users can only be activated by AOS instance administrators.</p> <p>After registration users additionally have to be activated in a second step.</p>  cURL Rust Python <pre><code># For convenience, administrators can request info on all unactivated users at once\ncurl -H \"Authorization: Bearer &lt;API-Or-OIDC_TOKEN&gt;\" \\\n-H \"Content-Type: application/json\" \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/user/not_activated\n</code></pre> <pre><code># Native JSON request to activate registered user\ncurl -H \"Authorization: Bearer &lt;API-Or-OIDC_TOKEN&gt;\" \\\n-H \"Content-Type: application/json\" \\\n-X PATCH https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/user/&lt;user-id&gt;/activate\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch all not activated users\nlet get_request = GetNotActivatedUsersRequest {};\n\n// Send the request to the AOS instance gRPC gateway\nlet unactivated = user_client.get_not_activated_users(request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", unactivated);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request for user activation\nlet user_id = uuid::Uuid::parse(\"12345678-1234-1234-1234-123456789999\").unwrap();\n\nlet activate_request = ActivateUserRequest {\nuser_id: user_id.to_string()\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet activate_response = user_client.activate_user(activate_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"Activated user: {:#?}\", activate_response.user_id)\n</code></pre> <pre><code># Create tonic/ArunaAPI request for user activation\nrequest = ActivateUserRequest(\n    user_id=\"&lt;user-id&gt;\"  # Has to be a valid UUID v4 of a registered user\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.user_client.ActivateUser(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/01_Get-Storage-Access/#who-am-i-what-am-i","title":"Who Am I / What Am I","text":"<p>To check which user a token is associated with or get information about the current users permissions, you can use the UserService API.</p> <p>Note</p> <p>Only AOS instance administrators can request user information of other users.</p>  cURL Rust Python <pre><code># Native JSON request to fetch user information associated with authorization token\ncurl -H \"Authorization: Bearer &lt;API-Or-OIDC_TOKEN&gt;\" \\\n-H \"Content-Type: application/json\" \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/user\n</code></pre> <pre><code># Native JSON request to fetch user information associated with the provided user id\ncurl -H \"Authorization: Bearer &lt;API-Or-OIDC_TOKEN&gt;\" \\\n-H \"Content-Type: application/json\" \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/user?userId=&lt;user-id&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch user info of current user\nlet get_request = GetUserRequest {\nuser_id: \"\".to_string()\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = user_client.get_user(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"Received permission info for user: {:#?}\", response.user);\nprintln!(\"Received project permissions:\");\nfor permission in response.project_permissions {\nprintln!(\"{:#?}\", permission);\n}\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch user info of current user\nrequest = GetUserRequest()\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.user_client.GetUser(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/","title":"How to deal with tokens and permissions","text":""},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#introduction","title":"Introduction","text":"<p>The only actions that can be executed with your OIDC token are the user registration, fetching user info and API token creation/deletion.</p> <p>For every action afterwards inside the AOS the user needs a generated API token with sufficient permissions. Permissions can be granted either through scoped API tokens for projects or collections themselves or through user specific permissions which will be enforced by a global/personal token.</p>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#generate-api-token","title":"Generate API token","text":"<p>An API token can be created with different scopes and/or different permissions.</p>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#available-token-permissions","title":"Available token permissions","text":"<ul> <li><code>NONE</code> (\"PERMISSION_NONE\"): No permissions granted</li> <li><code>READ</code> (\"PERMISSION_READ\"): Read only access</li> <li><code>APPEND</code> (\"PERMISSION_APPEND\"): Can create new resources but cannot modify existing</li> <li><code>MODIFY</code> (\"PERMISSION_MODIFY\"): Can create new resources and modify existing</li> <li><code>ADMIN</code> (\"PERMISSION_ADMIN\"): Can create new resources, modify existing and additionally delete</li> </ul> <p>So when we talk about minimum requirements for authorization, we get the following order: <code>ADMIN &gt; MODIFY &gt; APPEND &gt; READ</code></p>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#available-api-token-scopes","title":"Available API token scopes","text":"Global/Personal <p>The fields <code>projectId</code> and <code>collectionId</code> are empty on creation.  This token is valid with nearly every request and inherits the permissions which are set user-specific on projects.  For example, when a user is added to a project with READ permission,  this token \"inherits and enforces\" the user's READ permission with every request regarding the project or its resources.</p> Project:  <p>The field <code>projectId</code> is filled and the field <code>collectionId</code> is empty.  This token is valid for the specific Project and all the resources which are associated with it.  These tokens can be used to give general access to a Project and all resources registered under it, however, should not be distributed carelessly.</p> Collection:  <p>The field <code>collectionId</code> is filled and the field <code>projectId</code> is empty. This token is valid only for the specific Collection and its containing Objects/ObjectGroups.  These tokens can be used to give users access to a more specific selection of Collections.</p>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#add-users-to-project","title":"Add users to Project","text":"<p>Users can be granted specific permissions for projects, which are inherited and enforced by their global/personal tokens.  This makes it easy to add users to projects without them having to create an additional token per project or even collection.  It also makes it easy to restrict or extend a user's permissions for a project without having to revoke, re-generate and/or re-distribute tokens.</p> <p>Info</p> <p>This request needs at least ADMIN permissions on the specific Project.</p>  cURL Rust Python <pre><code># Native JSON request to add user with admin permissions to a project\ncurl -d '\n  {\n    \"userPermission\": {\n      \"userId\": \"&lt;user-id&gt;\",\n      \"projectId\": \"&lt;project-id&gt;\",\n      \"permission\": \"PERMISSION_ADMIN\"\n    }\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/project/&lt;project-id&gt;/add_user\n</code></pre> <pre><code># Native JSON request to add user with read only permissions to a project\ncurl -d '\n  {\n    \"userPermission\": {\n      \"userId\": \"&lt;user-id&gt;\",\n      \"projectId\": \"&lt;project-id&gt;\",\n      \"permission\": \"PERMISSION_READ\"\n    }\n  }\n' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/project/&lt;project-id&gt;/add_user\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add user with admin permissions to a project\nlet add_request = AddUserToProjectRequest {\nproject_id: \"&lt;project-id&gt;\".to_string(),\nuser_permission: Some(ProjectPermission {\nuser_id: \"&lt;user-id&gt;\".to_string(),\ndisplay_name: \"\".to_string(),\nproject_id: \"&lt;project-id&gt;\".to_string(),\npermission: Permission::Admin as i32,\n}),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = project_client.add_user_to_project(add_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add user with read only permissions to a project\nlet add_request = AddUserToProjectRequest {\nproject_id: \"&lt;project-id&gt;\".to_string(),\nuser_permission: Some(ProjectPermission {\nuser_id: \"&lt;user-id&gt;\".to_string(),\ndisplay_name: \"\".to_string(),\nproject_id: \"&lt;project-id&gt;\".to_string(),\npermission: Permission::Read as i32,\n}),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = project_client.add_user_to_project(add_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to add user with admin permissions to a project\nrequest = AddUserToProjectRequest(\n    project_id=\"&lt;project-id&gt;\",\n    user_permission=ProjectPermission(\n        user_id=\"&lt;user-id&gt;\",\n        project_id=\"&lt;project-id&gt;\",\n        permission=Permission.Value(\"PERMISSION_ADMIN\")  # Needs int, therefore .Value()\n    )\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.project_client.AddUserToProject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to add user with read only permissions to a project\nrequest = AddUserToProjectRequest(\n    project_id=\"&lt;project-id&gt;\",\n    user_permission=ProjectPermission(\n        user_id=\"&lt;user-id&gt;\",\n        project_id=\"&lt;project-id&gt;\",\n        permission=Permission.Value(\"PERMISSION_READ\")   # Needs int, therefore .Value()\n    )\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.project_client.AddUserToProject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#edit-project-user-permission","title":"Edit Project user permission","text":"<p>The assigned permissions to the users can be changed by project administrators afterwards.</p> <p>Info</p> <p>This request needs at least ADMIN permissions on the specific Project.</p>  cURL Rust Python <pre><code># Native JSON request to set a users permission to read only for the specific project\ncurl -d '\n  {\n    \"userPermission\": {\n      \"userId\": \"&lt;user-id&gt;\",\n      \"projectId\": \"&lt;project-id&gt;\",\n      \"permission\": \"PERMISSION_READ\"\n    }\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/project/&lt;project-id&gt;/edit_user\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to set a users permission to read only for the specific project\nlet edit_request = EditUserPermissionsForProjectRequest {\nproject_id: \"&lt;project-id&gt;\".to_string(),\nuser_permission: Some(ProjectPermission {\nuser_id: \"&lt;user-id&gt;\".to_string(),\ndisplay_name: \"\".to_string(),\nproject_id: \"&lt;project-id&gt;\".to_string(),\npermission: Permission::Read as i32,\n}),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = project_client.edit_user_permissions_for_project(edit_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to set a users permission to read only for the specific project\nrequest = EditUserPermissionsForProjectRequest(\n    project_id=\"&lt;project-id&gt;\",\n    user_permission=ProjectPermission(\n        user_id=\"&lt;user-id&gt;\",\n        project_id=\"&lt;project-id&gt;\",\n        permission=Permission.Value(\"PERMISSION_READ\")  # Needs int, therefore .Value()\n    )\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.project_client.EditUserPermissionsForProject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#remove-project-user","title":"Remove Project user","text":"<p>Users can, of course, also be completely removed from projects again, depriving them of any access with personalized tokens. </p> <p>However, access with project/collection scoped tokens is not restricted with the removal of the user.</p> <p>Info</p> <p>This request needs at least ADMIN permissions on the specific Project.</p>  cURL Rust Python <pre><code># Native JSON request to remove a user from a specific project\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/project/&lt;project-id&gt;/remove_user?userId=&lt;user-id&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to remove a user from a specific project\nlet delete_request = RemoveUserFromProjectRequest {\nproject_id: \"&lt;project-id&gt;\".to_string(),\nuser_id: \"&lt;user-id&gt;\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = project_client.remove_user_from_project(edit_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to remove a user from a specific project\nrequest = RemoveUserFromProjectRequest(\n    project_id=\"&lt;project-id&gt;\",\n    user_id=\"&lt;user-id&gt;\"\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.project_client.RemoveUserFromProject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#generate-api-tokens","title":"Generate API Tokens","text":"<p>Here are some API examples on generating API tokens with individual scopes and permissions.</p> <p>Warning</p> <p>The token secret is only available once in the response and cannot be re-generated!</p> <p>Store the received token secret in a secure location for further usage. If a token secret is lost or compromised, delete the old token and generate a new one.</p>  cURL Rust Python <pre><code># Native JSON request to create a global/personal token\n#  This token inherits the permissions from the projects the user is a member of\ncurl -d '\n  {\n    \"projectId\": \"\",\n    \"collectionId\": \"\",\n    \"name\": \"MyPersonalToken\",\n    \"expiresAt\": {\n      \"timestamp\": \"2023-01-01T00:00:00.000Z\"\n    }\n  }' \\\n-H 'Authorization: Bearer &lt;OIDC-or-API_token' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/auth/token\n</code></pre> <pre><code># Native JSON request to create a project scoped token with MODIFY permissions\ncurl -d '\n  {\n    \"projectId\": \"&lt;project-id&gt;\",\n    \"collectionId\": \"\",\n    \"name\": \"Project-Modify-Token\",\n    \"expiresAt\": {\n      \"timestamp\": \"2023-01-01T00:00:00.000Z\"\n    },\n    \"permission\": \"PERMISSION_MODIFY\"\n  }' \\\n-H 'Authorization: Bearer &lt;OIDC-Or-API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/auth/token\n</code></pre> <pre><code># Native JSON request to create a collection scoped token with READ permissions\ncurl -d '\n  {\n    \"projectId\": \"\",\n    \"collectionId\": \"&lt;collection-id&gt;\",\n    \"name\": \"Collection-ReadOnly-Token\",\n    \"expiresAt\": {\n      \"timestamp\": \"2023-01-01T00:00:00.000Z\"\n    },\n    \"permission\": \"PERMISSION_READ\"\n  }' \\\n-H 'Authorization: Bearer &lt;OIDC-Or-API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/auth/token\n</code></pre> <p>The \"in-line\" conversion of a NativeDateTime to a gRPC Timestamp is kind of hacky.</p> <p>In any case it is recommended to implement the <code>From&lt;NativeDateTime&gt;</code> or <code>TryFrom&lt;NativeDateTime&gt;</code> trait for the Timestamp Struct.</p> <pre><code>// Create tonic/ArunaAPI request to create a global/personal API token with expiration date\nlet expires_at = NaiveDate::from_ymd(2023, 01, 01).and_hms(0, 0, 0);\nlet create_request = CreateApiTokenRequest {\nproject_id: \"\".to_string(), collection_id: \"\".to_string(),\nname: \"MyPersonalToken\".to_string(),\nexpires_at: Some(ExpiresAt {\ntimestamp: Some(\nTimestamp::date_time(\nexpires_at.date().year().into(),\nexpires_at.date().month() as u8,\nexpires_at.date().day() as u8,\nexpires_at.time().hour() as u8,\nexpires_at.time().minute() as u8,\nexpires_at.time().second() as u8,\n).unwrap(), ),\n}),\npermission: Permission::None as i32,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = user_client.create_api_token(create_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a global/personal API token with expiration date\nrequest = CreateAPITokenRequest(\n    project_id=\"\",  # Parameter can also be omitted if empty\n    collection_id=\"\",  # Parameter can also be omitted if empty\n    name=\"MyPersonalToken\",\n    expires_at=ExpiresAt(\n        timestamp=Timestamp(seconds=int(datetime.datetime(2023, 1, 1).timestamp()))\n    ),\n    permission=Permission.Value(\"PERMISSION_NONE\")  # Parameter can also be omitted for personal tokens\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.user_client.CreateAPIToken(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a project scoped API token with MODIFY permission\nrequest = CreateAPITokenRequest(\n    project_id=\"&lt;project-id&gt;\",\n    collection_id=\"\",  # Parameter can also be omitted if empty\n    name=\"ProjectReadOnly\",\n    expires_at=None,  # Parameter can also be omitted if None\n    permission=Permission.Value(\"PERMISSION_MODIFY\")\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.user_client.CreateAPIToken(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a collection scoped API token with APPEND permission\nrequest = CreateAPITokenRequest(\n    project_id=\"\",  # Parameter can also be omitted if empty\n    collection_id=\"&lt;collection-id&gt;\",  \n    name=\"ProjectReadOnly\",\n    expires_at=None,  # Parameter can also be omitted if None\n    permission=Permission.Value(\"PERMISSION_APPEND\")\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.user_client.CreateAPIToken(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#get-api-tokens","title":"Get API token(s)","text":"<p>API examples to fetch info of a specific token or all tokens of the current user.</p> <p>Info</p> <p>This request does not re-display the generated API token secret. See Generate API Tokens.</p>  cURL Rust Python <pre><code># Native JSON request to get info on a specific API token by its id\ncurl -H 'Authorization: Bearer &lt;OIDC-Or-API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/auth/token/{token-id}\n</code></pre> <pre><code># Native JSON request to get info on all tokens associated with the current user\ncurl -H 'Authorization: Bearer &lt;OIDC-Or-API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/auth/tokens\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to get info on a specific API token by its id\nlet get_request = GetApiTokenRequest { token_id: \"&lt;token-id&gt;\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = user_client.get_api_token(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to get info on all tokens associated with the current user\nlet get_request = GetApiTokensRequest {};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = user_client.get_api_tokens(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to get info on a specific API token by its id\nrequest = GetAPITokenRequest(\n    token_id=\"&lt;token-id&gt;\"\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.user_client.GetAPIToken(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to get info on all tokens associated with the current user\nrequest = GetAPITokensRequest()\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.user_client.GetAPITokens(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/02_How-To-Auth-Tokens/#revoke-tokens","title":"Revoke token(s)","text":"<p>API examples to revoke/delete a specific API token or all tokens of the current user.</p> <p>Note</p> <p>Only AOS instance administrators can revoke API tokens of other users.</p>  cURL Rust Python <pre><code># Native JSON request to revoke the specific API token\ncurl -H 'Authorization: Bearer &lt;OIDC-Or-API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X DELETE https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/auth/token/{token-id}\n</code></pre> <pre><code># Native JSON request to revoke all tokens of the current user\ncurl -H 'Authorization: Bearer &lt;OIDC-Or-API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X DELETE https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/auth/tokens\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to revoke the specific API token\nlet delete_request = DeleteApiTokenRequest {\ntoken_id: \"&lt;token-id&gt;\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = user_client.delete_api_token(delete_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to to revoke all tokens of the current user\nlet delete_request = DeleteApiTokensRequest {\nuser_id: \"\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = user_client.delete_api_tokens(delete_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to revoke the specific API token\nrequest = DeleteAPITokenRequest(\n    token_id=\"&lt;token-id&gt;\"\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.user_client.DeleteAPIToken(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to to revoke all tokens of the current user\nrequest = DeleteAPITokensRequest()\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.user_client.DeleteAPITokens(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/03_How-To-Project/","title":"How to use the Project API / ProjectServiceClient","text":""},{"location":"get_started/basic_usage/03_How-To-Project/#introduction","title":"Introduction","text":"<p>Here you get a quick rundown how to basically create, read, update and delete Projects within the AOS.</p> <p>This should be the first step after gaining access to the storage and creating an API token which is described in the previous chapters.</p>"},{"location":"get_started/basic_usage/03_How-To-Project/#create-project","title":"Create Project","text":"<p>API example for creating a new Project.</p> <p>Note</p> <p>Currently, to create a new Project you have to be an AOS instance administrator.</p>  cURL Rust Python <pre><code># Native JSON request to create a project\ncurl -d '\n  {\n    \"name\": \"cURL-API-Test-Project\", \n    \"description\": \"This project was created with a cURL request.\"\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/project\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a project\nlet create_request = CreateProjectRequest {\nname: \"Rust-API-Test-Project\".to_string(),\ndescription: \"This project was created with the gRPC Rust API client.\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = project_client.create_project(create_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a project\nrequest = CreateProjectRequest(\n    name=\"Python-API-Test-Project\",\n    description=\"This project was created with the gRPC Python API client.\"\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.project_client.CreateProject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/03_How-To-Project/#get-project","title":"Get Project","text":"<p>API example for fetching info of an existing Project.</p> <p>Info</p> <p>This request needs at least READ permissions on the specific Project.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information of a project\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/project/{project-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of a project\nlet get_request = GetProjectRequest { project_id: \"&lt;project-id&gt;\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = project_client.get_project(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of a project\nrequest = GetProjectRequest(\n    project_id=\"&lt;project-id&gt;\"\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.project_client.GetProject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/03_How-To-Project/#get-all-projects-of-user","title":"Get all Projects of User","text":"<p>API example for fetching all registered Projects a specific user is associated with.</p> <p>Note</p> <p>You have to be an AOS instance administrator to fetch all registered Projects associated with other users than yourself.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information of all projects a specific user is member of\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/user/{user-id}/projects\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of all projects a specific user is member of\nlet get_request = GetUserProjectsRequest {\nuser_id: \"\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = user_client.get_user_projects(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\\n\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of all projects a specific user is member of\nrequest = GetUserProjectsRequest(\n    user_id=\"\"  # Parameter can be omitted if empty\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.user_client.GetUserProjects(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/03_How-To-Project/#update-project","title":"Update Project","text":"<p>API example for updating an existing Project.</p> <p>Info</p> <p>This request needs at least ADMIN permissions on the specific Project.</p> <p>Warning</p> <p>A project update overwrites all the fields in the request, even if they're empty.  If you want to retain a field you have to explicitly set the old value.</p>  cURL Rust Python <pre><code># Native JSON request to update the metadata of a project\ncurl -d '\n  {\n    \"name\": \"cURL-API-Test-Project\", \n    \"description\": \"This project was updated with a cURL request.\"\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X PUT https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/project/{project-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the metadata of a project\nlet update_request = UpdateProjectRequest {\nproject_id: \"&lt;project-id&gt;\".to_string(),\nname: \"Rust-API-Test-Project\".to_string(),\ndescription: \"This project was updated with the gRPC Rust API client.\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = project_client.update_project(update_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the metadata of a project\nrequest = UpdateProjectRequest(\n    project_id=\"&lt;project-id&gt;\",\n    name=\"Python-API-Test-Project\",\n    description=\"This project was updated with the gRPC Python API client.\"\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.project_client.UpdateProject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/03_How-To-Project/#delete-project","title":"Delete Project","text":"<p>API examples for deleting a Project. </p> <p>Note</p> <p>Before a project can be deleted, all collections within the project must have been deleted or moved to other projects.  In other words, the project must be empty.</p> <p>Info</p> <p>This request needs at least ADMIN permissions on the specific Project.</p>  cURL Rust Python <pre><code># Native JSON request to delete a project\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X DELETE https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/project/{project-id}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to delete a project\nlet delete_request = DestroyProjectRequest {\nproject_id: \"&lt;project-id&gt;\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = project_client.destroy_project(delete_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete a project\nrequest = DestroyProjectRequest(\n    project_id=\"&lt;project-id&gt;\"\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.project_client.DestroyProject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/04_How-To-Collections/","title":"How to use the Collection API / CollectionServiceClient","text":""},{"location":"get_started/basic_usage/04_How-To-Collections/#introduction","title":"Introduction","text":"<p>Collections are the basic resource to organize stored data i.e. Objects.  Before you can create Collections you need to create a Project in the AOS.</p> <p>If you don't know how to create a Project you should read the previous chapter about the Project API basics.</p>"},{"location":"get_started/basic_usage/04_How-To-Collections/#create-collection","title":"Create Collection","text":"<p>API example for creating a new Collection.</p> <p>Info</p> <p>This request requires at least MODIFY permission on the Project in which the Collection is to be created.</p>  cURL Rust Python <pre><code># Native JSON request to create a new collection\ncurl -d '\n  {\n    \"name\": \"cURL-API-Test-Collection\",\n    \"description\": \"This collection was created with a cURL request.\",\n    \"projectId\": \"&lt;project-id&gt;\",\n    \"labels\": [\n      {\n        \"key\": \"LabelKey\",\n        \"value\": \"LabelValue\"\n      }\n    ],\n    \"hooks\": [\n      {\n        \"key\": \"HookKey\",\n        \"value\": \"HookValue\"\n      }\n    ],\n    \"labelOntology\": {\n      \"requiredLabelKeys\": [\n        \"LabelKey\"\n      ]\n    },\n    \"dataclass\": \"DATA_CLASS_PRIVATE\"\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a new collection\nlet create_request = CreateNewCollectionRequest {\nname: \"Rust-API-Test-Collection\".to_string(),\ndescription: \"This collection was created with the gRPC Rust API client.\".to_string(),\nproject_id: \"&lt;project-id&gt;\".to_string(),\nlabels: vec![KeyValue {\nkey: \"LabelKey\".to_string(),\nvalue: \"LabelValue\".to_string(),\n}],\nhooks: vec![KeyValue {\nkey: \"HookKey\".to_string(),\nvalue: \"HookValue\".to_string(),\n}],\nlabel_ontology: Some(LabelOntology {\nrequired_label_keys: vec![\"LabelKey\".to_string()],\n}),\ndataclass: DataClass::Private as i32,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = collection_client.create_new_collection(create_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a new collection\nrequest = CreateNewCollectionRequest(\n    name=\"Python-API-Test-Collection\",\n    description=\"This collection was created with the gRPC Python API client.\",\n    project_id=\"&lt;project-id&gt;\",\n    labels=[KeyValue(\n        key=\"LabelKey\",\n        value=\"LabelValue\"\n    )],\n    hooks=[KeyValue(\n        key=\"HookKey\",\n        value=\"HookValue\"\n    )],\n    label_ontology=LabelOntology([\"LabelKey\"]),\n    dataclass=DataClass.Value(\"DATA_CLASS_PRIVATE\")\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.collection_client.CreateNewCollection(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/04_How-To-Collections/#get-collections","title":"Get Collection(s)","text":"<p>API examples for fetching one or multiple existing Collection/s.</p> <p>Info</p> <p>This request needs at least READ permissions on the Collection or the Project under which the collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information of a collection\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;\n</code></pre> <pre><code># Native JSON request to fetch multiple collections of a project\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET \"https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collections/&lt;project-id&gt;?labelOrIdFilter.ids=&lt;collection-id-001&gt;&amp;labelOrIdFilter.ids=&lt;collection-id-002&gt;\"\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of a collection\nlet get_request = GetCollectionByIdRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = collection_client.get_collection_by_id(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch all collections of a project\nlet get_request = GetCollectionsRequest {\nproject_id: \"&lt;project-id&gt;\".to_string(),\nlabel_or_id_filter: None,\npage_request: None,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = collection_client.get_collections(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch multiple collections of a project filtered by their ids\nlet get_request = GetCollectionsRequest {\nproject_id: \"&lt;project-id&gt;\".to_string(),\nlabel_or_id_filter: Some(LabelOrIdQuery {\nlabels: None,\nids: vec![\n\"&lt;collection-id-001\".to_string(),\n\"&lt;collection-id-002\".to_string(),\n],\n}),\npage_request: None,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = collection_client.get_collections(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch multiple collections of a project filtered by label keys\nlet get_request = GetCollectionsRequest {\nproject_id: \"&lt;project-id&gt;\".to_string(),\nlabel_or_id_filter: Some(LabelOrIdQuery {\nlabels: Some(LabelFilter {\nlabels: vec![KeyValue {\nkey: \"LabelKey\".to_string(),\nvalue: \"\".to_string(),\n}],\nand_or_or: false,\nkeys_only: true,\n}),\nids: vec![],\n}),\npage_request: None,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = collection_client.get_collections(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of a collection\nrequest = GetCollectionByIDRequest(\n    collection_id=\"&lt;collection-id&gt;\"\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.collection_client.GetCollectionByID(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request fetch first 20 collections of a project\nrequest = GetCollectionsRequest(\n    project_id=\"&lt;project-id&gt;\",\n    label_or_id_filter=None,  # Parameter can also be omitted if None\n    page_request=None  # Parameter can also be omitted if None\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.collection_client.GetCollections(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch multiple collections of a project filtered by their ids\nGetCollectionsRequest(\n    project_id=\"&lt;project-id&gt;\",\n    label_or_id_filter=LabelOrIDQuery(\n        labels=None,  # Parameter can also be omitted if None\n        ids=[\"&lt;collection-id-001\",\n             \"&lt;collection-id-002\"]\n    ),\n    page_request=None  # Parameter can also be omitted if None\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.collection_client.GetCollections(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch multiple collections of a project filtered by label keys\nrequest = GetCollectionsRequest(\n    project_id=\"&lt;project-id&gt;\",\n    label_or_id_filter=LabelOrIDQuery(\n        labels=LabelFilter(\n            labels=[KeyValue(key=\"LabelKey\")],\n            and_or_or=False,\n            keys_only=True\n        ),\n        ids=None  # Parameter can also be omitted if None\n    ),\n    page_request=None  # Parameter can also be omitted if None\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.collection_client.GetCollections(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/04_How-To-Collections/#update-collection","title":"Update Collection","text":"<p>API example for updating a Collection.</p> <p>Warning</p> <p>A collection update overwrites all the fields in the request, even if they're empty.  If you want to retain a field you have to explicitly set the old value.</p> <p>Note</p> <p>You can pin a still unversioned Collection by providing an initial version in the update request.  This effectively creates a copy of the collection with a stable version and with all its objects pinned to their explicit revision number. Pinned collections can not be updated in place anymore. If you try to update an already versioned Collection you have to provide a (semantically) greater version in the request.</p> <p>Info</p> <p>This request needs at least MODIFY permissions on the Collection or the Project under which the collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to update a collections name and description\ncurl -d '\n  {\n    \"name\": \"UpdatedDummyCollection\",\n    \"description\": \"Updated description of a dummy collection.\",\n    \"labels\": [\n      {\n        \"key\": \"LabelKey\",\n        \"value\": \"LabelValue\"\n      }\n    ],\n    \"hooks\": [\n      {\n        \"key\": \"HookKey\",\n        \"value\": \"HookValue\"\n      }\n    ],\n    \"labelOntology\": {\n      \"requiredLabelKeys\": [\n        \"LabelKey\"\n      ]\n    },\n    \"dataclass\": \"DATA_CLASS_PRIVATE\"\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X PUT https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update a collections name and description\nlet update_request = UpdateCollectionRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nname: \"Rust-API-Updated-Collection\".to_string(),\ndescription: \"This collection was updated through the Rust API.\".to_string(),\nlabels: vec![KeyValue {\nkey: \"LabelKey\".to_string(),\nvalue: \"LabelValue\".to_string(),\n}],\nhooks: vec![KeyValue {\nkey: \"HookKey\".to_string(),\nvalue: \"HookValue\".to_string(),\n}],\nlabel_ontology: Some(LabelOntology {\nrequired_label_keys: vec![\"LabelKey\".to_string()],\n}),\ndataclass: DataClass::Private as i32,\nversion: None,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = collection_client.update_collection(update_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update a collections name and description\nrequest = UpdateCollectionRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    name=\"Python-API-Updated-Collection\",\n    description=\"This collection was updated with the gRPC Python API client.\",\n    labels=[KeyValue(\n        key=\"LabelKey\",\n        value=\"LabelValue\"\n    )],\n    hooks=[KeyValue(\n        key=\"HookKey\",\n        value=\"HookValue\"\n    )],\n    label_ontology=LabelOntology([\"LabelKey\"]),\n    dataclass=DataClass.Value(\"DATA_CLASS_PRIVATE\"),\n    version=None  # Parameter can also be omitted if None\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.collection_client.UpdateCollection(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/04_How-To-Collections/#pin-collection","title":"Pin Collection","text":"<p>API examples to pin a Collection, i.e. give it a fixed semantic version.</p> <p>This effectively creates a copy of the collection with a stable version and with all its objects pinned to their explicit revision number. Pinned collections can not be updated in place anymore.</p> <p>Info</p> <p>This request needs at least MODIFY permissions on the Collection or the Project under which the collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to pin a collection to a specific version\ncurl -d '\n  {\n    \"version\": {\n        \"major\": 1,\n        \"minor\": 2,\n        \"patch\": 3\n      }\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/pin\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to pin a collection to a specific version\nlet pin_request = PinCollectionVersionRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nversion: Some(Version {\nmajor: 1,\nminor: 2,\npatch: 3,\n}),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = collection_client.pin_collection_version(pin_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to pin a collection to a specific version\nrequest = PinCollectionVersionRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    version=Version(\n        major=1,\n        minor=2,\n        patch=3\n    )\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.collection_client.PinCollectionVersion(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/04_How-To-Collections/#delete-collection","title":"Delete Collection","text":"<p>API examples for deleting a Collection.</p> <p>Note</p> <p>Before a collection can be deleted, all objects within the collection must have been deleted or moved to other collections.  In other words, the collection must be empty.</p> <p>Info</p> <p>This request needs at least MODIFY permissions on the Collection or ADMIN permissions on the Project under which the collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to delete a collection\ncurl -d '\n  {\n    \"force\": false\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X DELETE https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;\n</code></pre> <pre><code># Native JSON request to force delete a collection with force\ncurl -d '\n  {\n    \"force\": true\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X DELETE https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to delete a collection\nlet delete_request = DeleteCollectionRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nforce: false\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = collection_client.delete_collection(delete_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to delete a collection with force\nlet delete_request = DeleteCollectionRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nforce: true\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = collection_client.delete_collection(delete_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete a collection\nrequest = DeleteCollectionRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    force=False\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.collection_client.DeleteCollection(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete a collection with force\nrequest = DeleteCollectionRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    force=True\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.collection_client.DeleteCollection(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/","title":"How to use the Object API / ObjectServiceClient","text":""},{"location":"get_started/basic_usage/05_How-To-Objects/#introduction","title":"Introduction","text":"<p>Objects are the primary resource to actually hold the data you upload.  Before you can initialize any Objects you have to create a Collection to ensure consistent authorization for all </p> <p>If you don't know how to create a Collection you should read the previous chapter about the Collection API basics.</p>"},{"location":"get_started/basic_usage/05_How-To-Objects/#initialize-object","title":"Initialize Object","text":"<p>The first step is to initialize an Object. This creates an Object in the AOS and marks it as Staging. As long as an Object is in the staging area data can be uploaded to it.</p> <p>Info</p> <p>This request needs at least APPEND permissions on the Object's Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to initialize an staging object\ncurl -d '\n  {\n    \"object\": {\n      \"filename\": \"aruna.png\",\n      \"contentLen\": \"123456\",\n      \"dataclass\": \"DATA_CLASS_PRIVATE\",\n      \"labels\": [\n        {\n          \"key\": \"LabelKey\",\n          \"value\": \"LabelValue\"\n        }\n      ],\n      \"hooks\": [],\n      \"subPath\": \"\"\n    },\n    \"preferredEndpointId\": \"\",\n    \"multipart\": false,\n    \"isSpecification\": false,\n    \"hash\": {}\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to initialize an staging object\nlet init_request = InitializeNewObjectRequest {\nobject: Some(StageObject {\nfilename: \"aruna.png\".to_string(),\ncontent_len: 123456,\nsource: None,\ndataclass: DataClass::Private as i32,\nlabels: vec![KeyValue {\nkey: \"LabelKey\".to_string(),\nvalue: \"LabelValue\".to_string(),\n}],\nhooks: vec![KeyValue {\nkey: \"HookKey\".to_string(),\nvalue: \"HookValue\".to_string(),\n}],\nsub_path: \"\".to_string(),\n}),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npreferred_endpoint_id: \"\".to_string(),\nmultipart: false,\nis_specification: false,\nhash: None,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.initialize_new_object(init_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to initialize an staging object\nrequest = InitializeNewObjectRequest(\n    object=StageObject(\n        filename=\"aruna.png\",\n        content_len=123456,\n        source=None,  # Parameter can also be omitted if None\n        dataclass=DataClass.Value(\"DATACLASS_PRIVATE\"),\n        labels=[KeyValue(\n            key=\"LabelKey\",\n            value=\"LabelValue\"\n        )],\n        hooks=[KeyValue(\n            key=\"HookKey\",\n            value=\"HookValue\"\n        )],\n        subPath=\"\",  # Parameter can also be omitted if empty\n    ),\n    collection_id=\"&lt;collection-id&gt;\",\n    preferred_endpoint_id=\"\",  # Parameter can also be omitted if empty\n    multipart=False,\n    is_specification=False,\n    hash=None  # Will be provided at object finish in this example\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.InitializeNewObject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/#upload-data-to-an-staging-object","title":"Upload data to an Staging Object","text":"<p>After initializing an Object you can request an upload url with the object id you received from the initialization. Data then can be uploaded through the received url to the AOS data proxy.</p> <p>If the data associated with the Object is greater than 4 Gigabytes you have to request a multipart upload and chunk your data in parts which are at most 4 Gigabytes in size. You also have to request an upload url for each part individually.</p> <p>Info</p> <p>Requesting an upload URL needs at least APPEND permissions on the Object's Collection or the Project under which the Collection is registered.</p>"},{"location":"get_started/basic_usage/05_How-To-Objects/#single-part-upload","title":"Single part upload","text":"cURL Rust Python <pre><code># Native JSON request to request an upload url for single part upload\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}/staging/{upload-id}/upload\n\n# Native JSON request to upload single part data through the generated data proxy upload url\ncurl -X PUT -T &lt;path-to-local-file&gt; &lt;upload-url&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to request an upload url for single part upload\nlet get_request = GetUploadUrlRequest {\nobject_id: \"&lt;object-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nupload_id: \"&lt;upload-id&gt;\".to_string(),\nmultipart: false,\npart_number: 1,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.get_upload_url(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\nlet upload_url = response.url.unwrap().url;\n\n// Upload local file to the generated upload URL\nlet path = Path::new(\"/path/to/local/file\");\nlet file = tokio::fs::File::open(path).await.unwrap();\n\nlet client = reqwest::Client::new();\nlet stream = FramedRead::new(file, BytesCodec::new());\nlet body   = Body::wrap_stream(stream);\n\n// Send the request to the upload url\nlet response = client.put(upload_url)\n.body(body)\n.send()\n.await\n.unwrap();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to request an upload url for single part upload\nrequest = GetUploadURLRequest(\n    object_id=\"&lt;object-id&gt;\",\n    upload_id=\"&lt;upload-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    multipart=False,\n    part_number=1\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.GetUploadURL(request=request)\n\n# Do something with the response\nprint(f'{response}')\nupload_url = response.url.url\n\n# Upload local file to the generated upload URL\nfile_path = \"/tmp/aruna.png\"\nheaders = {'Content-type': 'application/octet-stream'}\nupload_response = requests.put(upload_url, data=open(file_path, 'rb'), headers=headers)\n\n# Do something with the response\nprint(f'{upload_response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/#multipart-upload","title":"Multipart upload","text":"<p>Note</p> <p>For each uploaded part of the multipart upload you will receive a so called <code>ETag</code> in the response header which has to be saved with the correlating part number for the Object finishing.</p> <p>Numbers of upload parts start with 1, not 0.</p> <p>Tip</p> <p>Upload of parts from multipart upload can be uploaded parallel.</p> <p>Warning</p> <p>If the data is stored in an S3 endpoint individual parts of multipart upload have to be at least 5MiB in size (5242880 bytes) or the Object finishing will fail.</p>  cURL Rust Python <pre><code># Native JSON request to request an upload url for specific part of multipart upload\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}/staging/{upload-id}/upload?multipart=true&amp;partNumber=&lt;part-number&gt;\n\n# Upload multipart data with native JSON requests through the generated data proxy upload urls\ncurl -X PUT -T &lt;path-to-local-file&gt; &lt;upload-url&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI to request an upload url for specific part of multipart upload\nlet get_request = GetUploadUrlRequest {\nobject_id: \"&lt;object-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nupload_id: \"&lt;upload-id&gt;\".to_string(),\nmultipart: true,\npart_number: &lt;part-number&gt; as i32,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.get_upload_url(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to request an upload url for specific part of multipart upload\nrequest = GetUploadURLRequest(\n    object_id=\"&lt;object-id&gt;\",\n    upload_id=\"&lt;upload-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    multipart=True,\n    part_number=&lt;part-number&gt;\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.GetUploadURL(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/#multipart-upload-example","title":"Multipart upload example","text":"cURL Rust Python <pre><code>COLLECTION_ID=&lt;collection-id&gt;\nOBJECT_ID=&lt;staging-object-id&gt;\nUPLOAD_ID=&lt;objects-upload-id&gt;\n\n# Loop over all file parts, request an upload url, upload the data and display ETag with its part number\nfor i in \"Dummy_Archive.tar.gz.aa\",1 \"Dummy_Archive.tar.gz.ab\",2 \"Dummy_Archive.tar.gz.ac\",3 \"Dummy_Archive.tar.gz.ad\",4; do IFS=\",\"; # Split input at comma\nset -- $i;  # Convert the \"tuple\" into the param args $1 $2 ...\nPART_FILE=$1\nPART_NUM=$2\n\nUPLOAD_URL=$(curl -s -H \"$API_HEADER\" \\\n-H 'Content-Type: application/json' \\\n-X GET \"https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/${COLLECTION_ID}/object/${OBJECT_ID}/staging/${UPLOAD_ID}/upload?multipart=true&amp;partNumber=${PART_NUM}\" | jq -r '.url.url')    ETAG=$(curl -X PUT -T ${PART_FILE} -i \"${UPLOAD_URL}\" | grep etag)\n\necho -e \"\\nPart: ${PART_NUM}, ETag: ${ETAG}\\n\"\ndone\n</code></pre> <pre><code>let mut file = tokio::fs::File::open(\"/path/to/local/file\").await.unwrap();     // File handle\nlet mut remaining_bytes: usize = file.metadata().await.unwrap().len() as usize; // File size in bytes\nlet mut upload_part_counter: i64 = 0; let mut completed_parts: Vec&lt;CompletedParts&gt; = Vec::new();\n\nconst UPLOAD_BUFFER_SIZE: usize = 1024 * 1024 * 50; // 50MiB chunks\nlet mut buffer_size = UPLOAD_BUFFER_SIZE;           // Variable buffer size for loop\n\nloop {\n// Increment part number\nupload_part_counter += 1;\n\n// Set buffer size\nif remaining_bytes &lt; UPLOAD_BUFFER_SIZE {\nbuffer_size = remaining_bytes;\n}\n\n// Fill buffer with bytes from file\nlet mut data_buf = vec![0u8; buffer_size];\nfile.read_exact(&amp;mut data_buf).await.unwrap();\n\n// Create tonic/ArunaAPI request to request an upload url for multipart upload part\nlet upload_url = object_client\n.get_upload_url(GetUploadUrlRequest {\nobject_id: object_id.to_string(),\nupload_id: upload_id.to_string(),\ncollection_id: collection_id.to_string(),\nmultipart: true,\npart_number: upload_part_counter as i32,\n})\n.await\n.unwrap()\n.into_inner()\n.url.unwrap().url;\n\n// Upload buffer content to upload url and parse ETag from response header\nlet client   = reqwest::Client::new();\nlet response = client.put(upload_url).body(data_buf).send().await.unwrap();\nlet etag_raw = response.headers().get(\"ETag\").unwrap().as_bytes();\nlet etag     = std::str::from_utf8(etag_raw).unwrap().to_string();\n\n// Collect ETag with corresponding part number\ncompleted_parts.push(CompletedParts {\netag: etag,\npart: upload_part_counter,\n});\n\n// Update the amount of remaining bytes for the next loop\nremaining_bytes -= buffer_size;\nif remaining_bytes == 0 {\nbreak;\n}\n}\n\n// Retain the completed parts for usage in the FinishObjectRequest\nprintln!(\"{:#?}\", completed_parts);\n</code></pre> <pre><code>CHUNK_SIZE = 1024 * 1024 * 50;  # 50MiB chunks\n\nfile_path = \"/path/to/local/file\"\nheaders = {'Content-type': 'application/octet-stream'}  # Arbitrary binary data upload\ncompleted_parts = []\n\n# Open file and return a stream\nwith open(file_path, 'rb') as file_in:\n    for i, data_chunk in enumerate(read_file_chunks(file_in, CHUNK_SIZE)):  # (1)\n        # Create tonic/ArunaAPI request to request an upload url for multipart upload part\n        get_request = GetUploadURLRequest(\n            object_id=\"&lt;object-id&gt;\",\n            upload_id=\"&lt;upload-id&gt;\",\n            collection_id=\"&lt;collection-id&gt;\",\n            multipart=True,\n            part_number=i+1\n        )\n\n        # Send the request to the AOS instance gRPC gateway\n        get_response = client.object_client.GetUploadURL(request=get_request)\n\n        # Extraxt download url from response\n        upload_url = get_response.url.url\n\n        # Upload file content chunk to upload url\n        upload_response = requests.put(upload_url, data=data_chunk, headers=headers)\n\n        # Parse ETag from response header\n        etag = str(upload_response.headers[\"etag\"].replace(\"\\\"\", \"\"))\n\n        # Collect ETag with corresponding part number\n        completed_parts.append(\n            CompletedParts(\n                etag=etag,\n                part=i+1\n            )\n        )\n\n# Retain the completed parts for usage in the FinishObjectRequest\nprint(f'{completed_parts}')\n</code></pre> <ol> <li>This function returns a generator with byte chunks of the specified file: <pre><code>    def read_file_chunks(file_object, chunk_size=5242880):\n\"\"\"\n    Generator to read set chunk sizes of a file object.\n    Args:\n        file_object: Open file handle\n        chunk_size: Size of chunk to read (Default: 5MiB)\n\n    Returns: Generator with file content bytes in chunk size\n    \"\"\"\n    while True:\n        data = file_object.read(chunk_size)\n        if not data:\n            break\n        yield data\n</code></pre></li> </ol>"},{"location":"get_started/basic_usage/05_How-To-Objects/#finish-object","title":"Finish Object","text":"<p>Finishing the Object transfers it from the staging area into production.  From this moment the Object is generally available for other functions other than Get Object. On success the response will contain all the information on the finished Object.</p> <p>Info</p> <p>This request needs at least APPEND permissions on the Object's Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to finish a single upload staging object\ncurl -d '\n  {\n    \"hash\": {\n      \"alg\": \"HASHALGORITHM_SHA256\",\n      \"hash\": \"8e83e391f7d4bd995e772029a097d42f9fa4f433a8e99585d4a902f599dc7b9c\"\n    },\n    \"noUpload\": false,\n    \"completedParts\": [],\n    \"autoUpdate\": true\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X PATCH https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}/staging/{upload-id}/finish\n</code></pre> <pre><code># Native JSON request to finish a multipart upload staging object\ncurl -d '\n  {\n    \"hash\": {\n      \"alg\": \"HASHALGORITHM_SHA256\",\n      \"hash\": \"8e83e391f7d4bd995e772029a097d42f9fa4f433a8e99585d4a902f599dc7b9c\"\n    },\n    \"noUpload\": false,\n    \"completedParts\": [\n      {\n        \"etag\": \"&lt;etag-of-part-number-upload&gt;\",\n        \"part\": \"&lt;part-number&gt;\"\n      },\n      {\n        \"etag\": \"&lt;etag-of-part-number-upload&gt;\",\n        \"part\": \"&lt;part-number&gt;\"\n      }\n    ],\n    \"autoUpdate\": true\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X PATCH https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}/staging/{upload-id}/finish\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to finish a single part upload staging object\nlet finish_request = FinishObjectStagingRequest {\nobject_id: \"&lt;object-id&gt;\".to_string(),\nupload_id: \"&lt;upload-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nhash: Some(Hash {\nalg: Hashalgorithm::Sha256 as i32,\nhash: \"8e83e391f7d4bd995e772029a097d42f9fa4f433a8e99585d4a902f599dc7b9c\".to_string()\n}),\nno_upload: false,\ncompleted_parts: vec![],\nauto_update: true,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.finish_object_staging(finish_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to finish a multipart upload staging object\nlet finish_request = FinishObjectStagingRequest {\nobject_id: \"&lt;object-id&gt;\".to_string(),\nupload_id: \"&lt;upload-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nhash: Some(Hash {\nalg: Hashalgorithm::Sha256 as i32,\nhash: \"8e83e391f7d4bd995e772029a097d42f9fa4f433a8e99585d4a902f599dc7b9c\".to_string()\n}),\nno_upload: false,\ncompleted_parts: vec![\nCompletedParts {\netag: \"bfa7d257edcc9b962b7ab1a0a75b9808\".to_string(),\npart: 1,\n},\nCompletedParts {\netag: \"af62c64eb6bcc9890d0aadf5720bf1ff\".to_string(),\npart: 2,\n},\n],\nauto_update: true,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.finish_object_staging(finish_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to finish a single part upload staging object\nrequest = FinishObjectStagingRequest(\n    object_id=\"&lt;object-id&gt;\",\n    upload_id=\"&lt;upload-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    hash=Hash(\n        alg=Hashalgorithm.Value(\"HASHALGORITHM_SHA256\"),\n        hash=\"&lt;sha256-file-hashsum&gt;\"  # E.g. 8e83e391f7d4bd995e772029a097d42f9fa4f433a8e99585d4a902f599dc7b9c\n    ),\n    no_upload=False,\n    completed_parts=[],\n    auto_update=True\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.FinishObjectStaging(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to finish a multipart upload staging object\nfinish_request = FinishObjectStagingRequest(\n    object_id=\"&lt;object-id&gt;\",\n    upload_id=\"&lt;upload-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    hash=Hash(\n        alg=Hashalgorithm.Value(\"HASHALGORITHM_SHA256\"),\n        hash=\"&lt;sha256-file-hashsum&gt;\"  # E.g. 8e83e391f7d4bd995e772029a097d42f9fa4f433a8e99585d4a902f599dc7b9c\n    ),\n    no_upload=False,\n    completed_parts=[\n        CompletedParts(\n            etag=\"&lt;upload-etag&gt;\",  # E.g. bfa7d257edcc9b962b7ab1a0a75b9808\n            part=1\n         ),\n        CompletedParts(\n            etag=\"&lt;upload-etag&gt;\",  # E.g. af62c64eb6bcc9890d0aadf5720bf1ff\n            part=2\n        )\n    ],\n    auto_update=True\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.FinishObjectStaging(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/#get-object","title":"Get Object","text":"<p>Information on finished or staging Objects can be fetched with their id and the id of their collection.</p> <p>The <code>with_url</code> (or <code>withUrl</code>) parameter controls if the response includes a download URL for the specific object.</p> <p>Info</p> <p>This request needs at least READ permissions on the Object's Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information of an object by its unique id\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}\n</code></pre> <pre><code># Native JSON request to fetch information of an object by its unique id including a download url\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}?withUrl=true\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of an object\nlet get_request = GetObjectByIdRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nobject_id: \"&lt;object-id&gt;\".to_string(),\nwith_url: false\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.get_object(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to to fetch information of an object\nrequest = GetObjectByIDRequest(\n    object_id=\"&lt;object-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    with_url=False\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.GetObjectByID(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/#get-objects","title":"Get Objects","text":"<p>You can also fetch information on multiple Objects of a Collection.  The Objects returned will not include staging Objects.</p> <p>By default, this request also returns only the first 20 Objects. You can either increase the page size to receive more Objects per request and/or request the next Objects by pagination.  Additionally, you can include id or label filters to narrow the returned Objects.</p> <p>Info</p> <p>This request needs at least READ permissions on the Object's Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information of the first 20 unfiltered objects in a collection\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/objects\n</code></pre> <pre><code># Native JSON request to fetch information of the first 250 unfiltered objects in a collection\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/objects?pageRequest.pageSize=250\n</code></pre> <pre><code># Native JSON request to fetch information of the objects 21-40 (i.e. the next page) in a collection\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/objects?pageRequest.lastUuid=&lt;id-of-last-received-object&gt;\n</code></pre> <pre><code># Native JSON request to fetch information of all objects in a collection matching one of the provided ids\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/objects?labelIdFilter.ids=&lt;object-id-001&gt;&amp;labelIdFilter.ids=&lt;object-id-002&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI to fetch information of the first 20 unfiltered objects in a collection\nlet get_request = GetObjectsRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: None,\nlabel_id_filter: None,\nwith_url: false,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.get_objects(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI to fetch information of the first 250 unfiltered objects in a collection\nlet get_request = GetObjectsRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: Some(PageRequest {\nlast_uuid: \"\".to_string(),\npage_size: 250,\n}),\nlabel_id_filter: None,\nwith_url: false,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.get_objects(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI to fetch information of the objects 21-40 (i.e. the next page) in a collection\nlet get_request = GetObjectsRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: Some(PageRequest {\nlast_uuid: \"&lt;id-of-last-received-object&gt;\".to_string(),\npage_size: 0,\n}),\nlabel_id_filter: None,\nwith_url: false,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.get_objects(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI to fetch information of all objects in a collection matching one of the provided ids\nlet get_request = GetObjectsRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: None,\nlabel_id_filter: Some(LabelOrIdQuery {\nlabels: None,\nids: vec![\"&lt;object-id-001&gt;\".to_string(), \"&lt;object-id-001&gt;\".to_string()],\n}),\nwith_url: false,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.get_objects(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI to fetch multiple object of a collection filtered by label key(s)\nlet get_request = GetObjectsRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: None,\nlabel_id_filter: Some(LabelOrIdQuery {\nlabels: Some(LabelFilter {\nlabels: vec![KeyValue {\nkey: \"LabelKey\".to_string(),\nvalue: \"\".to_string(),\n}],\nand_or_or: false,\nkeys_only: true,\n}),\nids: vec![],\n}),\nwith_url: false,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.get_objects(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of the first 20 unfiltered objects in a collection\nrequest = GetObjectsRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    page_request=None,\n    label_id_filter=None,\n    with_url=False\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.GetObjects(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of the first 250 unfiltered objects in a collection\nrequest = GetObjectsRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    page_request=PageRequest(\n        last_uuid=\"\",  # Parameter can also be omitted if empty\n        page_size=250\n    ),\n    label_id_filter=None,\n    with_url=False\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.GetObjects(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of the objects 21-40 (i.e. the next page) in a collection\nrequest = GetObjectsRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    page_request=PageRequest(\n        last_uuid=\"&lt;last-received-object-id&gt;\",\n        page_size=0  # Parameter can also be omitted if &lt;= 0\n    ),\n    label_id_filter=None,  # Parameter can also be omitted if None\n    with_url=False\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.GetObjects(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of all objects in a collection matching one of the provided ids\nrequest = GetObjectsRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    page_request=None,  # Parameter can also be omitted if None\n    label_id_filter=LabelOrIDQuery(\n        labels=None,  # Parameter can also be omitted if None\n        ids=[\"&lt;object-id-001&gt;\", \"&lt;object-id-001&gt;\"]\n    ),\n    with_url=False\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.GetObjects(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch multiple objects of a collection filtered by label key(s)\nrequest = GetObjectsRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    page_request=None,  # Parameter can also be omitted if None\n    label_id_filter=LabelOrIDQuery(\n        labels=LabelFilter(\n            labels=[KeyValue(\n                key=\"isDummyObject\",\n                value=\"\"  # Parameter can also be omitted if empty or keys_only=True\n            )],\n            and_or_or=False,\n            keys_only=True\n        )\n    ),\n    with_url=False\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.GetObjects(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/#download-object-data","title":"Download Object data","text":"<p>To download the data associated with an Object you have to request a download url.  This can be done with an individual request or directly while getting information on an Object.</p> <p>Info</p> <p>This request needs at least READ permissions on the Object's Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to fetch an Objects download url\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}/download\n\n# Download the data with the provided remote file name\ncurl -J -O -X GET &lt;received-download-url&gt;\n</code></pre> <pre><code># Native JSON request to fetch information of an Object including its download id\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}?withUrl=true\n\n# Download the data\ncurl -J -O -X GET &lt;received-download-url&gt;\n</code></pre> <pre><code>// Send GET request to download url\nlet response = reqwest::get(download_url).await.unwrap();\n\n// Only proceed if response status is ok\nif response.status() != StatusCode::OK {\npanic!(\"Get request for file download failed.\");\n}\n\n// Set default filename to \"object.&lt;object-id&gt;\"\nlet mut file_name = format!(\n\"object.{}\",\nresponse.url().path_segments().unwrap().last().unwrap()\n);\n\n// Try to extract filename from download url query parameter\nfor elem in response.url().query_pairs() {\nif elem.0 == \"filename\" {\nfile_name = elem.1.to_string();\n}\n}\n\n// Create local file\nlet target_path = Path::new(\"/tmp\").join();\nlet mut target_file = File::create(target_path).unwrap();\n\n// Write response content to file\nlet mut content = Cursor::new(response.bytes().await.unwrap());\ncopy(&amp;mut content, &amp;mut target_file).unwrap();\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch an Objects download url\ndownload_url_request = GetDownloadURLRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    object_id=\"&lt;object-id&gt;\"\n)\n\n# Send the request to the AOS instance gRPC gateway\ndownload_url_response = client.object_client.GetDownloadURL(request=download_url_request)\n\n# Extract download url from response\ndownload_url = download_url_response.url.url\n\n# Try to extract filename from download url query parameter\nparsed_url = urlparse(download_url)\nlocal_filename = parse_qs(parsed_url.query)['filename'][0]\n\nif local_filename is None:\n    local_filepath = os.path.join(\"/tmp\", f'object.{object_id}')\nelse:\n    local_filepath = os.path.join(\"/tmp\", local_filename)\n\n# Send GET request to download url\nwith requests.get(download_url, stream=True) as r:\n    r.raise_for_status()\n\n    // Write response content in chunks to local file\n    with open(local_filepath, 'wb') as f:\n        for chunk in r.iter_content(chunk_size=8192):  # Chunk size can be adapted\n            f.write(chunk)\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/#update-object","title":"Update Object","text":"<p>Objects can still be updated after finishing.</p> <p>Note</p> <p>Concurrent updates from different collections are possible but discouraged.</p> <p>If you want to explicitly update an object without paying attention to whether  it is being updated by someone else at that moment, the <code>force</code> parameter can be used.</p> <p>Info</p> <p>This request needs at least MODIFY permissions on the Object's Collection or the Project under which the Collection is registered.</p>"},{"location":"get_started/basic_usage/05_How-To-Objects/#update-which-does-not-create-a-new-revision","title":"Update which does not create a new revision","text":"<p>Just adding one or multiple labels to an Object does not create a new revision with this specific request.</p>  cURL Rust Python <pre><code># Native JSON request to add a label to an object\ncurl -d '\n  {\n    \"labelsToAdd\": [\n      {\n        \"key\": \"AnotherKey\",\n        \"value\": \"AnotherValue\"\n     }\n   ]\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X PATCH https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}/add_labels\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add a label to an object\nlet add_request = AddLabelsToObjectRequest {\nobject_id: \"&lt;object-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nlabels_to_add: vec![KeyValue {\nkey: \"AnotherKey\".to_string(),\nvalue: \"AnotherValue\".to_string(),\n}],\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.add_label_to_object(add_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to add a label to an object\nrequest = AddLabelsToObjectRequest(\n    object_id=\"&lt;object-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    labels_to_add=[KeyValue(\n        key=\"AnotherKey\",\n        value=\"AnotherValue\"\n    )]\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.AddLabelsToObject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/#update-which-creates-a-new-revision","title":"Update which creates a new revision","text":"<p>Every other update creates a new revision of an Object and basically an updated clone of the Object.  A regular update of an Object returns the updated Object which is still in the staging area. Comparable to the Object initialization process, the updated Object must be finished before it is generally available.</p> <p>Warning</p> <p>An object update overwrites all the fields in the request, even if they're empty.  If you want to retain a field you have to explicitly set the old value.</p>"},{"location":"get_started/basic_usage/05_How-To-Objects/#update-without-data-re-upload","title":"Update without data re-upload","text":"cURL Rust Python <pre><code># Native JSON request to update an objects dataclass\ncurl -d '\n  {\n    \"object\": {\n      \"filename\": \"aruna.png\",\n      \"contentLen\": \"123456\",\n      \"dataclass\": \"DATA_CLASS_PUBLIC\",\n        \"labels\": [\n          {\n            \"key\": \"LabelKey\",\n            \"value\": \"LabelValue\"\n          }\n        ],\n        \"hooks\": [],\n        \"subPath\": \"\"\n      },\n    \"reupload\": false,\n    \"preferredEndpointId\": \"\",\n    \"multiPart\": false,\n    \"isSpecification\": false,\n    \"force\": false,\n    \"hash\": {}\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}/update\n\n# Native JSON request to finish the updated object\ncurl -d '\n  {\n    \"hash\": {\n      \"alg\": \"HASHALGORITHM_SHA256\",\n      \"hash\": \"8e83e391f7d4bd995e772029a097d42f9fa4f433a8e99585d4a902f599dc7b9c\"\n    },\n    \"noUpload\": true,\n    \"completedParts\": [],\n    \"autoUpdate\": true\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X PATCH https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}/staging/{upload-id}/finish\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update an objects dataclass\nlet update_request = UpdateObjectRequest {\nobject_id: \"&lt;object-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nobject: Some(StageObject {\nfilename: \"aruna.png\".to_string(),\ncontent_len: 123456,\nsource: None,\ndataclass: DataClass::Public as i32,\nlabels: vec![KeyValue {\nkey: \"LabelKey\".to_string(),\nvalue: \"LabelValue\".to_string(),\n}],\nhooks: vec![KeyValue {\nkey: \"HookKey\".to_string(),\nvalue: \"HookValue\".to_string(),\n}],\nsub_path: \"\".to_string(),\n}),\nreupload: false,\npreferred_endpoint_id: \"\".to_string(),\nmulti_part: false,\nis_specification: false,\nforce: false,\nhash: None, // Will be provided at object finish in this example\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.update_object(update_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\nlet UpdateObjectResponse {object_id, staging_id, collection_id} = response;\n\n// Create tonic/ArunaAPI request to finish the updated object\nlet finish_request = FinishObjectStagingRequest {\nobject_id: object_id,\nupload_id_ staging_id,\ncollection_id: collection_id,\nhash: Some(Hash {\nalg: Hashalgorithm::Sha256 as i32,\nhash: \"8e83e391f7d4bd995e772029a097d42f9fa4f433a8e99585d4a902f599dc7b9c\".to_string()\n}),\nno_upload: true,\ncompleted_parts: vec![],\nauto_update: true,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.finish_object_staging(finish_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update an objects description\nupdate_request = UpdateObjectRequest(\n    object_id=\"&lt;object-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    object=StageObject(\n        filename=\"aruna.png\",\n        content_len=123456,\n        source=None,  # Parameter can also be omitted if None\n        dataclass=DataClass.Value(\"DATACLASS_PUBLIC\"),\n        labels=[KeyValue(\n            key=\"LabelKey\",\n            value=\"LabelValue\"\n        )],\n        hooks=[KeyValue(\n            key=\"HookKey\",\n            value=\"HookValue\"\n        )],\n        subPath=\"\",  # Parameter can also be omitted if empty\n    ),\n    reupload=False,\n    preferred_endpoint_id=\"\",  # Parameter can also be omitted if empty\n    multi_part=False,  # Parameter can also be omitted if `reupload=False`\n    is_specification=False,\n    force=False,\n    hash=None  # Will be provided at object finish in this example\n)\n\n# Send the request to the AOS instance gRPC gateway\nupdate_response = client.object_client.UpdateObject(request=update_request)\n\n# Do something with the response\nprint(f'{update_response}')\n\n# Create tonic/ArunaAPI request to finish a single part upload staging object\nfinish_request = FinishObjectStagingRequest(\n    object_id=update_response.object_id,\n    upload_id=update_response.upload_id,\n    collection_id=update_response.collection_id,\n    hash=Hash(\n        alg=Hashalgorithm.Value(\"HASHALGORITHM_SHA256\"),\n        hash=\"&lt;sha256-file-hashsum&gt;\"  # E.g. 8e83e391f7d4bd995e772029a097d42f9fa4f433a8e99585d4a902f599dc7b9c\n    ),\n    no_upload=True,\n    completed_parts=[],\n    auto_update=True\n)\n\n# Send the request to the AOS instance gRPC gateway\nfinish_response = client.object_client.FinishObjectStaging(request=finish_request)\n\n# Do something with the response\nprint(f'{finish_response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/#update-with-data-re-upload","title":"Update with data re-upload","text":"cURL Rust Python <pre><code># Native JSON request to re-upload the modified data\ncurl -d '\n  {\n    \"object\": {\n      \"filename\": \"aruna.png\",\n      \"contentLen\": \"1234567\",\n      \"dataclass\": \"DATA_CLASS_PRIVATE\",\n        \"labels\": [\n          {\n            \"key\": \"LabelKey\",\n            \"value\": \"LabelValue\"\n          }\n        ],\n        \"hooks\": [],\n        \"subPath\": \"\"\n      },\n    \"reupload\": true,\n    \"preferredEndpointId\": \"\",\n    \"multiPart\": false,\n    \"isSpecification\": false,\n    \"force\": false,\n    \"hash\": {}\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}/update\n\n# Native JSON request to request an upload url for single part upload\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}/staging/{upload-id}/upload\n\n# Native JSON request to upload single part data through the generated data proxy upload url\ncurl -X PUT -T &lt;path-to-local-file&gt; &lt;upload-url&gt;\n\n# Native JSON request to finish the updated object\ncurl -d '\n  {\n    \"hash\": {\n      \"alg\": \"HASHALGORITHM_SHA256\",\n      \"hash\": \"cb380c5ed9724991fb91acb9e21ba11ff68c27bc3a6121284a946cccfdfaaf47\"\n    },\n    \"noUpload\": false,\n    \"completedParts\": [],\n    \"autoUpdate\": true\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X PATCH https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object-id}/staging/{upload-id}/finish\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to re-upload the modified data\nlet update_request = UpdateObjectRequest {\nobject_id: \"&lt;object-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nobject: Some(StageObject {\nfilename: \"aruna.png\".to_string(),\ncontent_len: 1234567,\nsource: None,\ndataclass: DataClass::Private as i32,\nlabels: vec![KeyValue {\nkey: \"LabelKey\".to_string(),\nvalue: \"LabelValue\".to_string(),\n}],\nhooks: vec![KeyValue {\nkey: \"HookKey\".to_string(),\nvalue: \"HookValue\".to_string(),\n}],\nsub_path: \"\".to_string(),\n}),\nreupload: true,\npreferred_endpoint_id: \"\".to_string(),\nmulti_part: false,\nis_specification: false,\nforce: false,\nhash: None, // Will be provided at object finish in this example\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet update_response = object_client.update_object(update_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", update_response);\nlet UpdateObjectResponse {\nobject_id, staging_id, collection_id\n} = update_response;\n\n// Create tonic/ArunaAPI request to request an upload url for single part upload\nlet get_request = GetUploadUrlRequest {\nobject_id: object_id.clone(),\ncollection_id: collection_id.clone(),\nupload_id: staging_id.clone(),\nmultipart: false,\npart_number: 1,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet get_response = object_client.get_upload_url(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", get_response);\nlet upload_url = get_response.url.unwrap().url;\n\n// Upload local file to the generated upload URL\nlet path = Path::new(\"/path/to/local/file\");\nlet file = tokio::fs::File::open(path).await.unwrap();\n\nlet client = reqwest::Client::new();\nlet stream = FramedRead::new(file, BytesCodec::new());\nlet body   = Body::wrap_stream(stream);\n\n// Send the request to the upload url\nlet upload_response = client.put(upload_url)\n.body(body)\n.send()\n.await\n.unwrap();\n\n// Do something with the response\nprintln!(\"{:#?}\", upload_response);\n\n// Create tonic/ArunaAPI request to finish a single part upload staging object\nlet finish_request = FinishObjectStagingRequest {\nobject_id: object_id,\nupload_id: staging_id,\ncollection_id: collection_id,\nhash: Some(Hash {\nalg: Hashalgorithm::Sha256 as i32,\nhash: \"c1557cf6f426823f248f7285b3540812521935ebca372fb6689463efd6cadb61\".to_string()\n}),\nno_upload: false,\ncompleted_parts: vec![],\nauto_update: true,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet finish_response = object_client.finish_object_staging(finish_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", finish_response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to re-upload the modified data\nupdate_request = UpdateObjectRequest(\n    object_id=\"&lt;object-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    object=StageObject(\n        filename=\"aruna.png\",\n        content_len=1234567,\n        source=None,  # Parameter can also be omitted if None\n        dataclass=DataClass.Value(\"DATACLASS_PRIVATE\"),\n        labels=[KeyValue(\n            key=\"LabelKey\",\n            value=\"LabelValue\"\n        )],\n        hooks=[KeyValue(\n            key=\"HookKey\",\n            value=\"HookValue\"\n        )],\n        subPath=\"\",  # Parameter can also be omitted if empty\n    ),\n    reupload=True,\n    preferred_endpoint_id=\"\",  # Parameter can also be omitted if empty\n    multi_part=False,  # Parameter can also be omitted if `reupload=False`\n    is_specification=False,\n    force=False,\n    hash=None  # Will be provided at object finish in this example\n)\n\n# Send the request to the AOS instance gRPC gateway\nupdate_response = client.object_client.UpdateObject(request=update_request)\n\n# Do something with the response\nprint(f'{update_response}')\n\n# Create tonic/ArunaAPI request to request an upload url for single part upload\nget_request = GetUploadURLRequest(\n    object_id=update_response.object_id,\n    upload_id=update_response.upload_id,\n    collection_id=update_response.collection_id,\n    multipart=False,\n    part_number=1\n)\n\n# Send the request to the AOS instance gRPC gateway\nget_response = client.object_client.GetUploadURL(request=get_request)\n\n# Do something with the response\nprint(f'{get_response}')\nupload_url = get_response.url.url\n\n# Upload updated local file to the generated upload URL\nfile_path = \"/path/to/updated/local/file\"\nheaders = {'Content-type': 'application/octet-stream'}\nupload_response = requests.put(upload_url, data=open(file_path, 'rb'), headers=headers)\n\n# Do something with the response (e.g. check status if was successful)\nprint(f'{upload_response}')\n\n# Create tonic/ArunaAPI request to finish a single part upload staging object\nfinish_request = FinishObjectStagingRequest(\n    object_id=update_response.object_id,\n    upload_id=update_response.upload_id,\n    collection_id=update_response.collection_id,\n    hash=Hash(\n        alg=Hashalgorithm.Value(\"HASHALGORITHM_SHA256\"),\n        hash=\"&lt;updated-file-sha256-hashsum&gt;\"  # E.g. b53d51ea15b07422bb19d5f8671174e7d45b04f21cfed652127f845f5945bf38\n    ),\n    no_upload=False,\n    completed_parts=[],\n    auto_update=True\n)\n\n# Send the request to the AOS instance gRPC gateway\nfinish_response = client.object_client.FinishObjectStaging(request=finish_request)\n\n# Do something with the response\nprint(f'{finish_response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/#create-object-reference","title":"Create Object reference","text":"<p>References of an Object can be created in other Collections, which points to the same object in the database.  A reference can be either \"read only\", which means that the Object can not be modified from the specific Collection, or writeable, in which case the object in the target collection will be no different from the one in the source collection.</p> <p>Warning</p> <p>Updates on writeable references also update the Object in the source Collection.</p> <p>Info</p> <p>This request needs permission in the source and target Collection. The required permissions on the source collection depend on whether the reference should be writeable or not:</p> <ul> <li><code>true</code>: At least MODIFY on the source Collection or the Project under which the Collection is registered</li> <li><code>false</code>: At least READ on the source Collection or the Project under which the Collection is registered</li> </ul> <p>Additionally, the request needs MODIFY permissions on the target Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to create an auto-updated read-only reference to keep track of an object\ncurl -d '\n  {\n    \"writeable\": false,\n    \"autoUpdate\": true,\n    \"subPath\": \"\"\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;source-collection-id&gt;/object/&lt;object-id&gt;/reference/&lt;destination-collection-id&gt;\n</code></pre> <pre><code># Native JSON request to create a writeable reference in another collection for collaborative work\ncurl -d '\n  {\n    \"writeable\": true,\n    \"autoUpdate\": true\n    \"subPath\": \"\"\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;source-collection-id&gt;/object/&lt;object-id&gt;/reference/&lt;destination-collection-id&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create an auto-updated read-only reference to keep track of an object\nlet create_request = CreateObjectReferenceRequest {\nobject_id: \"&lt;object-id&gt;\".to_string(),\ncollection_id: \"&lt;source-collection-id&gt;\".to_string(),\ntarget_collection_id: \"&lt;target-collection-id&gt;\".to_string(),\nwriteable: false,\nauto_update: true,\nsub_path: \"\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.create_object_reference(create_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a writeable reference in another collection for collaborative work\nlet create_request = CreateObjectReferenceRequest {\nobject_id: \"&lt;object-id&gt;\".to_string(),\ncollection_id: \"&lt;source-collection-id&gt;\".to_string(),\ntarget_collection_id: \"&lt;target-collection-id&gt;\".to_string(),\nwriteable: true,\nauto_update: true,\nsub_path: \"\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.create_object_reference(create_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create an auto-updated read-only reference to keep track of an object\nrequest = CreateObjectReferenceRequest(\n    object_id=\"&lt;object-id&gt;\",\n    collection_id=\"&lt;source-collection-id&gt;\",\n    target_collection_id=\"&lt;target-collection-id&gt;\",\n    writeable=False,\n    auto_update=True,\n    subPath=\"\",  # Parameter can also be omitted if empty\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.CreateObjectReference(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a writeable reference in another collection for collaborative work\nrequest = CreateObjectReferenceRequest(\n    object_id=\"&lt;object-id&gt;\",\n    collection_id=\"&lt;source-collection-id&gt;\",\n    target_collection_id=\"&lt;target-collection-id&gt;\",\n    writeable=True,\n    auto_update=True,\n    subPath=\"\",  # Parameter can also be omitted if empty\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.CreateObjectReference(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/#move-object-to-other-collection","title":"Move Object to other Collection","text":"<p>Objects can be moved to another Collection without cloning.  E.g. this can be used to transfer Collection ownership of an Object.</p> <p>This process consists of two steps:</p> <ol> <li>Create writeable reference of the Object in another Collection</li> <li>Delete reference of the Object in the source Collection</li> </ol>  cURL Rust Python <pre><code># Native JSON request to create a writeable reference in another collection\ncurl -d '\n  {\n    \"writeable\": true,\n    \"autoUpdate\": true\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;source-collection-id&gt;/object/&lt;object-id&gt;/reference/&lt;target-collection-id&gt;\n\n# Native JSON request to delete writeable reference in source collection\ncurl -d '\n  {\n    \"withRevisions\": true, \n    \"force\": false\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X DELETE https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;source-collection-id&gt;/object/&lt;source-object-id&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a writeable reference in another collection\nlet create_request = CreateObjectReferenceRequest {\nobject_id: \"&lt;object-id&gt;\".to_string(),\ncollection_id: \"&lt;source-collection-id&gt;\".to_string(),\ntarget_collection_id: \"&lt;target-collection-id&gt;\".to_string(),\nwriteable: true,\nauto_update: true,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet create_response = object_client.create_object_reference(create_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", create_response);\n\n// Create tonic/ArunaAPI request to delete the object in the source collection\nlet delete_request = DeleteObjectRequest {\nobject_id: \"&lt;source-object-id&gt;\".to_string(),\ncollection_id: \"&lt;source-collection-id&gt;\".to_string(),\nwith_revisions: true,\nforce: false,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet delete_response = object_client.delete_object(delete_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", delete_response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a writeable reference in another collection\ncreate_request = CreateObjectReferenceRequest(\n    object_id=\"&lt;object-id&gt;\",\n    collection_id=\"&lt;source-collection-id&gt;\",\n    target_collection_id=\"&lt;target-collection-id&gt;\",\n    writeable=True,\n    auto_update=True\n)\n\n# Send the request to the AOS instance gRPC gateway\ncreate_response = client.object_client.CreateObjectReference(request=create_request)\n\n# Do something with the response\nprint(f'{create_response}')\n\n# Create tonic/ArunaAPI request to delete the object in the source collection\ndelete_request = DeleteObjectRequest(\n    object_id=\"&lt;source-object-id&gt;\",\n    collection_id=\"&lt;source-collection-id&gt;\",\n    with_revisions=True,\n    force=False\n)\n\n# Send the request to the AOS instance gRPC gateway\ndelete_response = client.object_client.DeleteObject(request=delete_request)\n\n# Do something with the response\nprint(f'Deleted: {delete_response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/#get-all-object-references","title":"Get all Object references","text":"<p>You can fetch information of all references an Object has in different Collections.</p> <p>Info</p> <p>This request needs at least READ permissions on the Object's Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to fetch all references of an object\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/object/&lt;object-id&gt;/references\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch all references of an object\nlet get_request = GetReferencesRequest {\nobject_id: \"&lt;object-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nwith_revisions: false\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.get_references(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to\nrequest = GetReferencesRequest(\n    object_id=\"&lt;object-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    with_revisions=False\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.GetReferences(request=request)\n\n# Do something with the response\nprint(f'Deleted: {response}')\n</code></pre>"},{"location":"get_started/basic_usage/05_How-To-Objects/#delete-object","title":"Delete Object","text":"<p>Objects can only be deleted from a Collection if at least one other writeable reference of the Object exists in another Collection. If at least one writeable reference still exists in another collection, only the object's reference to the specific collection is removed.</p> <p>This also applies for all revisions of the Object and will be enforced if <code>withRevisions = true</code> is set.</p> <p>Permanent deletion conditions:</p> <ul> <li>No writeable references of the specific Object and its revisions in other Collections</li> <li>Use of <code>force = true</code> in request</li> </ul> <p>Info</p> <p>The required permissions of this request depend on the value of the <code>force</code> parameter:</p> <ul> <li><code>true</code>: At least ADMIN on the source Collection or the Project under which the Collection is registered</li> <li><code>false</code>: At least APPEND on the source Collection or the Project under which the Collection is registered</li> </ul> <p>All conditions can be overwritten with the use of <code>force = true</code> in the request but this should be avoided at all costs. Therefore, only users with ADMIN permissions on the Project can use <code>force = true</code> in the request.</p> <p>Warning</p> <p>Non-writeable references will also be deleted alongside with the last writeable reference.</p>  cURL Rust Python <pre><code># Native JSON request to force delete an object with all its revisions\ncurl -d \\\n'{\n    \"withRevisions\": \"true\", \n    \"force\": \"true\"\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X DELETE https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/object/&lt;object-id&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to delete an object with all its revisions\nlet delete_request = DeleteObjectRequest {\nobject_id: \"&lt;object-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nwith_revisions: true,\nforce: true,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.delete_object(delete_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to delete an object with all its revisions\nrequest = DeleteObjectRequest(\n    object_id=\"&lt;source-object-id&gt;\",\n    collection_id=\"&lt;source-collection-id&gt;\",\n    with_revisions=True,\n    force=True\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.DeleteObject(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/06_How-To-Object-Paths/","title":"How to use the Object Paths API","text":""},{"location":"get_started/basic_usage/06_How-To-Object-Paths/#introduction","title":"Introduction","text":"<p>In order for the AOS to provide an S3 compatible interface, it is necessary that Objects can be accessed via one or more unique paths instead of their id.</p> <p>Currently, these paths comply with the standardized specifications of AWS S3 and are represented in the format <code>&lt;collection-version&gt;.&lt;collection-name&gt;.&lt;project-name&gt;/&lt;custom-path&gt;/&lt;object-filename&gt;</code> which resembles the S3 path-style <code>s3://bucket/key</code> where:</p> <ul> <li>bucket: <code>&lt;collection-version&gt;.&lt;collection-name&gt;.&lt;project-name&gt;</code></li> <li>key: <code>&lt;custom-path&gt;/&lt;object-filename&gt;</code></li> </ul> <p>When an object is initialized, a default path is automatically created if no custom path is specified.  This also applies when creating a reference to another collection. An object is thus always accessible via at least one path in each of its collections.</p> <p>Warning</p> <p>The fully qualified paths of objects are unique, which implies some conditions that must be met:</p> <ul> <li>Project and Collection names are restricted to the following characters: [a-z0-9-] (i.e. alphanumeric lowercase and hyphens)</li> <li>Project names are unique </li> <li>Collection names are unique within a project</li> <li>Objects with equal filenames cannot have the same (custom) path within a collection</li> </ul>"},{"location":"get_started/basic_usage/06_How-To-Object-Paths/#create-custom-object-path","title":"Create Custom Object Path","text":"<p>API example for creating an additional path associated with an object.</p> <p>Note</p> <p>As specified in S3, you always get the latest version of an object via a path.  The request of a specific object version is currently not possible.</p> <p>Info</p> <p>This request needs at least APPEND permissions on the Object's Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to create a custom object path \ncurl -d '\n  {\n    \"subPath\": \"/custom\"\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object_id}/path\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create an additional custom path for an object\nlet create_request = CreateObjectPathRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nobject_id: \"&lt;object-id&gt;\".to_string(),\nsub_path: \"/custom\".to_string(),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.create_object_path(create_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to request an upload url for specific part of multipart upload\nrequest = CreateObjectPathRequest(\n    object_id=\"&lt;object-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    sub_path=\"/custom\"\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.CreateObjectPath(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/06_How-To-Object-Paths/#set-object-path-visibility","title":"Set Object Path visibility","text":"<p>API example for modifying the visibility of an objects' path.</p>  cURL Rust Python <pre><code># Native JSON request to modify the visibility of a path of an object\ncurl -d '\n  {\n    \"visibility\": false\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection_id}/path/{path}/visibility\n</code></pre> <p>To make the specific path visible again just use the parameter <code>\"visibility\": true</code>.</p> <pre><code>// Create tonic/ArunaAPI request to modify the visibility of a path of an object\nlet set_request = SetObjectPathVisibilityRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npath: \"&lt;object-path&gt;\".to_string(),\nvisibility: false,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.set_object_path_visibility(set_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <p>To make the specific path visible again just use the parameter <code>visibility: true</code>.</p> <pre><code># Create tonic/ArunaAPI request to modify the visibility of a path of an object\nrequest = SetObjectPathVisibilityRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    path=\"/&lt;object-path&gt;\",\n    visibility=True\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.SetObjectPathVisibility(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <p>To make the specific path visible again just use the parameter <code>visibility=True</code>.</p>"},{"location":"get_started/basic_usage/06_How-To-Object-Paths/#get-object-paths","title":"Get Object Paths","text":"<p>API example for fetching all paths associated with an object.</p> <p>Info</p> <p>This request needs at least READ permissions on the Object's Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to get all object paths \ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object_id}/path?include_inactive=true\n</code></pre> <pre><code># Native JSON request to get only active object paths \ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/object/{object_id}/path\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch all paths associated with an object\nlet get_request = GetObjectPathRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nobject_id: \"&lt;object-id&gt;\".to_string(),\ninclude_inactive: true,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.get_object_path(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <p>To fetch only all of the active paths associated with an object just use the parameter <code>include_inactive: false</code>. </p> <pre><code># Create tonic/ArunaAPI request to to fetch all paths associated with an object\nrequest = GetObjectPathRequest(\n    object_id=\"&lt;object-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    include_inactive=True\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.GetObjectPath(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <p>To fetch only all of the active paths associated with an object just use the parameter <code>include_inactive=False</code>.</p>"},{"location":"get_started/basic_usage/06_How-To-Object-Paths/#get-all-object-paths-in-collection","title":"Get all Object Paths in Collection","text":"<p>API example for fetching all paths associated with the objects in a Collection.</p> <p>Info</p> <p>This request needs at least READ permissions on the Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to get all object paths of collection\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/paths?include_inactive=true\n</code></pre> <pre><code># Native JSON request to get only active object paths of collection\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/paths\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch all paths associated with objects in a collection\nlet get_request = GetObjectPathsRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\ninclude_inactive: true,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.get_object_paths(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <p>To fetch only all of the active paths of a collection just use the parameter <code>include_inactive: false</code>. </p> <pre><code># Create tonic/ArunaAPI request to to fetch all paths associated with an object\nrequest = GetObjectPathsRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    include_inactive=True\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.GetObjectPaths(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <p>To fetch only all of the active paths of a collection just use the parameter <code>include_inactiv=False</code>. </p>"},{"location":"get_started/basic_usage/06_How-To-Object-Paths/#get-object-by-path","title":"Get Object by Path","text":"<p>API example for fetching an Object associated with the specific path.</p>  cURL Rust Python <pre><code># Native JSON request to get object by any active path\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection-id}/path/{path}\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch all paths associated with objects in a collection\nlet get_request = GetObjectsByPathRequest {\ncollection_id=\"&lt;collection-id&gt;\",\npath: \"\".to_string(), // Default object path\nwith_revisions: false, };\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_client.get_object_paths(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <p>To fetch all revisions of an Object associated with the specific path use the parameter <code>with_revisions: true</code>.</p> <pre><code># Create tonic/ArunaAPI request to to fetch all paths associated with an object\nrequest = GetObjectsByPathRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    with_revisions=False\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_client.GetObjectPaths(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <p>To fetch all revisions of an Object associated with the specific path use the parameter <code>with_revisions=True</code>.</p>"},{"location":"get_started/basic_usage/07_How-To-ObjectGroups/","title":"How to use the ObjectGroup API / ObjectGroupServiceClient","text":""},{"location":"get_started/basic_usage/07_How-To-ObjectGroups/#introduction","title":"Introduction","text":"<p>ObjectGroups are a secondary, and therefore optional, resource to organize Objects inside Collections.</p> <p>ObjectGroups can be used to group objects that are closely related to each other into a logical unit and to describe them with additional metadata.</p>"},{"location":"get_started/basic_usage/07_How-To-ObjectGroups/#create-objectgroup","title":"Create ObjectGroup","text":"<p>API example for creating an ObjectGroup.</p> <p>Info</p> <p>This request needs at least APPEND permissions on the ObjectGroup's Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to create a new object group\ncurl -d '\n  {\n    \"name\": \"cURL-API-Test-ObjectGroup\",\n    \"description\": \"This object group was created with a cURL request.\",\n    \"objectIds\": [\n      \"&lt;object-id-001&gt;\",\n      \"&lt;object-id-002&gt;\",\n      \"&lt;object-id-003&gt;\"\n    ],\n    \"metaObjectIds\": [\n      \"&lt;object-id-004&gt;\"\n    ],\n    \"labels\": [\n      {\n        \"key\": \"isDummyGroup\",\n        \"value\": \"true\"\n      }\n    ],\n    \"hooks\": []\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/group\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to create a new object group\nlet create_request = CreateObjectGroupRequest {\nname: \"Rust-API-Test-ObjectGroup\".to_string(),\ndescription: \"This object group was created with the gRPC Rust API client.\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nobject_ids: vec![\n\"&lt;object-id-001&gt;\".to_string(),\n\"&lt;object-id-002&gt;\".to_string(),\n\"&lt;object-id-003&gt;\".to_string(),\n],\nmeta_object_ids: vec![\n\"&lt;object-id-004&gt;\".to_string(),\n],\nlabels: vec![KeyValue {\nkey: \"isDummyGroup\".to_string(),\nvalue: \"true\".to_string(),\n}],\nhooks: vec![],\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.create_object_group(create_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to create a new object group\nrequest = CreateObjectGroupRequest(\n    name=\"Python-API-Test-ObjectGroup\",\n    description=\"This object group was created with the gRPC Python API client.\",\n    collection_id=\"&lt;collection-id&gt;\",\n    object_ids=[\"&lt;object-id-001&gt;\",\n                \"&lt;object-id-002&gt;\",\n                \"&lt;object-id-003&gt;\"],\n    meta_object_ids=[\"&lt;object-id-004&gt;\"],\n    labels=[KeyValue(\n        key=\"isDummyGroup\",\n        value=\"true\"\n    )],\n    hooks=None\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.CreateObjectGroup(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-ObjectGroups/#get-objectgroup-and-its-revisions","title":"Get ObjectGroup (and its revisions)","text":"<p>Fetching information of an ObjectGroup only returns information of the ObjectGroup itself, not the containing Objects.</p> <p>Info</p> <p>This request needs at least READ permissions on the ObjectGroup's Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information about a specific object group\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/group/&lt;group-id&gt;\n</code></pre> <pre><code># Native JSON request to fetch information about the first 20 revisions of an object group\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/group/&lt;group-id&gt;/history\n</code></pre> <pre><code># Native JSON request to fetch information about the first 250 revisions of an object group\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/group/&lt;group-id&gt;/history?pageRequest.pageSize=250\n</code></pre> <pre><code># Native JSON request to fetch information about the revisions 21-40 (i.e. next page) of an object group\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/group/&lt;group-id&gt;/history?pageRequest.lastUuid=&lt;last-received-object-group-id&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information about a specific object group\nlet get_request = GetObjectGroupByIdRequest { group_id: \"&lt;object-group-id&gt;\".to_string(), collection_id: \"&lt;collection-id&gt;\".to_string(), };\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.get_object_group_by_id(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information about the first 20 revisions of an object group\nlet get_request = GetObjectGroupHistoryRequest {\ngroup_id: \"&lt;object-group-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: None\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.get_object_group_by_id(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information about the first 250 revisions of an object group\nlet get_request = GetObjectGroupHistoryRequest {\ngroup_id: \"&lt;object-group-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: Some(PageRequest {\nlast_uuid: \"\".to_string(),\npage_size: 250,\n}),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.get_object_group_by_id(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information about the revisions 21-40 (i.e. next page) of an object group\nlet get_request = GetObjectGroupHistoryRequest {\ngroup_id: \"&lt;object-group-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: Some(PageRequest {\nlast_uuid: \"&lt;last-received-object-group-id&gt;\".to_string(),\npage_size: 0,\n}),\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.get_object_group_by_id(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information about a specific object group\nrequest = GetObjectGroupByIdRequest(\n    group_id=\"&lt;object-group-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\"\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.GetObjectGroupById(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information about the first 20 revisions of an object group\nrequest = GetObjectGroupHistoryRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    group_id=\"&lt;object-group-id&gt;\",\n    page_request=None  # Parameter can also be omitted if None\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.GetObjectGroupHistory(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information about the first 250 revisions of an object group\nrequest = GetObjectGroupHistoryRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    group_id=\"&lt;object-group-id&gt;\",\n    page_request=PageRequest(\n        last_uuid=\"\",  # Parameter can also be omitted if empty\n        page_size=250\n    )\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.GetObjectGroupHistory(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information about the revisions 21-40 (i.e. next page) of an object group\nrequest = GetObjectGroupHistoryRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    group_id=\"&lt;object-group-id&gt;\",\n    page_request=PageRequest(\n        last_uuid=\"&lt;last-received-object-group-id&gt;\",  \n        page_size=0  # Parameter can also be omitted if &lt;= 0 (Defaults to 20)\n    )\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.GetObjectGroupHistory(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-ObjectGroups/#get-objectgroups-of-collection","title":"Get ObjectGroups of Collection","text":"<p>You can also fetch multiple ObjectGroups of a Collection at once.</p> <p>Info</p> <p>This request needs at least READ permissions on the ObjectGroup's Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information about the first 20 object groups of a collection\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/groups\n</code></pre> <pre><code># Native JSON request to fetch information about the first 250 object groups of a collection\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/groups?pageRequest.pageSize=250\n</code></pre> <pre><code># Native JSON request to fetch information about the object group 21-40 (i.e. next page) of an collection\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/groups?pageRequest.lastUuid=&lt;last-received-object-group-id&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information about the first 20 object groups of a collection\nlet get_request = GetObjectGroupsRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: None,\nlabel_id_filter: None,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.get_object_groups(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information about the first 250 object groups of a collection\nlet get_request = GetObjectGroupsRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: Some(PageRequest {\nlast_uuid: \"\".to_string(),\npage_size: 250,\n}),\nlabel_id_filter: None,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.get_object_groups(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information about the object groups 21-40 (i.e. next page) of an collection\nlet get_request = GetObjectGroupsRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: Some(PageRequest {\nlast_uuid: \"&lt;id-of-last-received-object-group&gt;\".to_string(),\npage_size: 0,\n}),\nlabel_id_filter: None,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.get_object_groups(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information about the first 20 object groups of a collection\nrequest = GetObjectGroupsRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    page_request=None,\n    label_id_filter=None\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.GetObjectGroups(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information about the first 250 object groups of a collection\nrequest = GetObjectGroupsRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    page_request=PageRequest(\n        last_uuid=\"\",  # Parameter can also be omitted if empty\n        page_size=250\n    ),\n    label_id_filter=None\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.GetObjectGroups(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information about the object groups 21-40 (i.e. next page) of an collection\nrequest = GetObjectGroupsRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    page_request=PageRequest(\n        last_uuid=\"&lt;last-received-object-group-id&gt;\",  \n        page_size=0  # Parameter can also be omitted if &lt;= 0 (Defaults to 20)\n    )\n    label_id_filter=None\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.GetObjectGroups(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-ObjectGroups/#get-objectgroup-objects","title":"Get ObjectGroup Objects","text":"<p>Information of the containing Objects have to be requested separately. Analogous to the Get Objects functionality, the number of returned objects can be customized/paginated. There is also the possibility to only fetch the objects marked as metadata of the ObjectGroup.</p> <p>Info</p> <p>This request needs at least READ permissions on the ObjectGroup's Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to fetch information of the first 20 objects of an object group including meta objects\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/group/&lt;group-id&gt;/objects\n</code></pre> <pre><code># Native JSON request to fetch information of the first 250 objects of an object group including meta objects\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/group/&lt;group-id&gt;/objects?pageRequest.pageSize=250\n</code></pre> <pre><code># Native JSON request to fetch information only of meta objects of an object group\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/group/&lt;group-id&gt;/objects?metaOnly=true\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of the first 20 objects of an object group including meta objects\nlet get_request = GetObjectGroupObjectsRequest {\ngroup_id: \"&lt;object-group-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: None,\nmeta_only: false\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.get_object_group_objects(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information of the first 250 objects of an object group including meta objects\nlet get_request = GetObjectGroupObjectsRequest {\ngroup_id: \"&lt;object-group-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: Some(PageRequest {\nlast_uuid: \"\".to_string(),\npage_size: 250\n}), meta_only: false\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.get_object_group_objects(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch information only of meta objects of an object group\nlet get_request = GetObjectGroupObjectsRequest {\ngroup_id: \"&lt;object-group-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\npage_request: None, meta_only: true\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.get_object_group_objects(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of the first 20 objects of an object group including meta objects\nrequest = GetObjectGroupObjectsRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    group_id=\"&lt;object-group-id&gt;\",\n    page_request=None,\n    meta_only=False\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.GetObjectGroupObjects(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch information of the first 250 objects of an object group including meta objects\nrequest = GetObjectGroupObjectsRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    group_id=\"&lt;object-group-id&gt;\",\n    page_request=PageRequest(\n        last_uuid=\"\",\n        page_size=250\n    ),\n    meta_only=False\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.GetObjectGroupObjects(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to to fetch information only of meta objects of an object group\nrequest = GetObjectGroupObjectsRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    group_id=\"&lt;object-group-id&gt;\",\n    page_request=None,\n    meta_only=True\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.GetObjectGroupObjects(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-ObjectGroups/#update-objectgroup","title":"Update ObjectGroup","text":"<p>ObjectGroups can also be updated after creation.</p>"},{"location":"get_started/basic_usage/07_How-To-ObjectGroups/#update-which-does-not-create-a-new-revision","title":"Update which does not create a new revision","text":"<p>Just adding one or multiple labels to an Object does not create a new revision with this specific request.</p> <p>Info</p> <p>This request needs at least MODIFY permissions on the Object's Collection or the Project under which the Collection is registered.</p>  cURL Rust Python <pre><code># Native JSON request to add a label to an object \ncurl -d '\n  {\n    \"labelsToAdd\": [\n      {\n        \"key\": \"AnotherKey\",\n        \"value\": \"AnotherValue\"\n     }\n   ]\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X PATCH https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/{collection_id}/group/{group_id}/add_labels\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to add a label to an object group\nlet add_request = AddLabelsToObjectGroupRequest {\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\ngroup_id: \"&lt;object-group-id&gt;\".to_string(),\nlabels_to_add: vec![KeyValue {\nkey: \"AnotherKey\".to_string(),\nvalue: \"AnotherValue\".to_string(),\n}],\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.add_labels_to_object_group(add_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to add a label to an object group\nrequest = AddLabelsToObjectGroupRequest(\n    collection_id=\"&lt;collection-id&gt;\",\n    group_id=\"&lt;object-id&gt;\",\n    labels_to_add=[KeyValue(\n        key=\"AnotherKey\",\n        value=\"AnotherValue\"\n    )]\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.AddLabelsToObjectGroup(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-ObjectGroups/#update-which-creates-a-new-revision","title":"Update which creates a new revision","text":"<p>Otherwise, updating an ObjectGroup itself always creates a new revision of the ObjectGroup.</p> <p>Note</p> <p>Updating an Object which is part of the ObjectGroup also initiates the update process and creates a new revision of the ObjectGroup.</p> <p>Info</p> <p>This request needs at least APPEND permissions on the ObjectGroup's Collection or the Project under which the Collection is registered.</p> <p>Warning</p> <p>A object group update overwrites all the fields in the request, even if they're empty.  If you want to retain a field you have to explicitly set the old value.</p>  cURL Rust Python <pre><code># Native JSON request to update the description of an object group\ncurl -d '\n  {\n    \"name\": \"DummyGroup\",\n    \"description\": \"This is an updated description.\",\n    \"objectIds\": [\n      \"&lt;object-id-001&gt;\",\n      \"&lt;object-id-002&gt;\",\n      \"&lt;object-id-003&gt;\"\n    ],\n    \"metaObjectIds\": [\n      \"&lt;object-id-004&gt;\"\n    ],\n    \"labels\": [\n      {\n        \"key\": \"isDummyGroup\",\n        \"value\": \"true\"\n      }\n    ],\n    \"hooks\": []\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/group/&lt;object-group-id&gt;\n</code></pre> <pre><code># Native JSON request to update the description and objects contained in the object group\ncurl -d '\n  {\n    \"name\": \"DummyGroup\",\n    \"description\": \"This is an updated updated description.\",\n    \"objectIds\": [\n      \"&lt;object-id-002&gt;\",\n      \"&lt;object-id-003&gt;\",\n      \"&lt;object-id-005&gt;\"\n    ],\n    \"metaObjectIds\": [\n      \"&lt;object-id-004&gt;\"\n    ],\n    \"labels\": [\n      {\n        \"key\": \"isDummyGroup\",\n        \"value\": \"true\"\n      }\n    ],\n    \"hooks\": []\n  }' \\\n-H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X POST https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/group/&lt;object-group-id&gt;\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the description of an object group\nlet update_request = UpdateObjectGroupRequest {\ngroup_id: \"&lt;object-group-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nname: \"Rust-API-Test-ObjectGroup\".to_string(),\ndescription: \"This object group was updated with the gRPC Rust API client.\".to_string(),\nobject_ids: vec![\n\"&lt;object-id-001&gt;\".to_string(),\n\"&lt;object-id-002&gt;\".to_string(),\n\"&lt;object-id-003&gt;\".to_string(),\n],\nmeta_object_ids: vec![\"&lt;object-id-004&gt;\".to_string()],\nlabels: vec![KeyValue {\nkey: \"isDummyGroup\".to_string(),\nvalue: \"true\".to_string(),\n}],\nhooks: vec![],\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.update_object_group(update_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to update the description and objects contained in the object group\nlet update_request = UpdateObjectGroupRequest {\ngroup_id: \"&lt;object-group-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nname: \"Rust-API-Test-ObjectGroup\".to_string(),\ndescription: \"This object group was updated with the gRPC Rust API client.\".to_string(),\nobject_ids: vec![\n\"&lt;object-id-001&gt;\".to_string(),\n\"&lt;object-id-002&gt;\".to_string(),\n\"&lt;object-id-005&gt;\".to_string(),\n],\nmeta_object_ids: vec![\"&lt;object-id-004&gt;\".to_string()],\nlabels: vec![KeyValue {\nkey: \"isDummyGroup\".to_string(),\nvalue: \"true\".to_string(),\n}],\nhooks: vec![],\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.update_object_group(update_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the description of an object group\nrequest = UpdateObjectGroupRequest(\n    group_id=\"&lt;object-group-id&gt;\",\n    name=\"Python-API-Test-ObjectGroup\",\n    description=\"This object group was updated with the gRPC Python API client.\",\n    collection_id=\"&lt;collection-id&gt;\",\n    object_ids=[\"&lt;object-id-001&gt;\",\n                \"&lt;object-id-002&gt;\",\n                \"&lt;object-id-003&gt;\"],\n    meta_object_ids=[\"&lt;object-id-004&gt;\"],\n    labels=[KeyValue(\n        key=\"isDummyGroup\",\n        value=\"true\"\n    )],\n    hooks=None\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.UpdateObjectGroup(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <pre><code># Create tonic/ArunaAPI request to update the description of an object group\nrequest = UpdateObjectGroupRequest(\n    group_id=\"&lt;object-group-id&gt;\",\n    name=\"Python-API-Test-ObjectGroup\",\n    description=\"This object group was updated with the gRPC Python API client.\",\n    collection_id=\"&lt;collection-id&gt;\",\n    object_ids=[\"&lt;object-id-001&gt;\",\n                \"&lt;object-id-002&gt;\",\n                \"&lt;object-id-005&gt;\"],\n    meta_object_ids=[\"&lt;object-id-004&gt;\"],\n    labels=[KeyValue(\n        key=\"isDummyGroup\",\n        value=\"true\"\n    )],\n    hooks=None\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.UpdateObjectGroup(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/07_How-To-ObjectGroups/#delete-objectgroup","title":"Delete ObjectGroup","text":"<p>Deletion of an ObjectGroup only removes the ObjectGroup and its revisions. The Objects included in the ObjectGroup are not affected by the deletion of the ObjectGroup.</p> Deleting last revision of ObjectGroup: <p>Upon deletion the Labels, Hooks, object references of the revision and the ObjectGroup itself is permanently removed from the database.</p> ObjectGroup has more than one revision: <p>Upon deletion the labels, hooks and object references of the specific revision are removed directly but the revision itself will retain with the name and description set to \"DELETED\". Deleted ObjectGroups are excluded from the general methods which fetch multiple ObjectGroups except the id is specifically provided.</p> <p>Info</p> <p>This request needs at least MODIFY permissions on the ObjectGroup's Collection or the Project under which the Collection is registered.</p> <p>Warning</p> <p>ObjectGroup revisions can not be restored even if the revision still exists as DELETED.</p>  cURL Rust Python <pre><code># Native JSON request to delete an ObjectGroup revision\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X DELETE https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/group/&lt;object-group-id&gt;\n</code></pre> <pre><code># Native JSON request to completely delete an ObjectGroup with all its revisions\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X DELETE https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/collection/&lt;collection-id&gt;/group/&lt;object-group-id&gt;?withRevisions=true\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to delete an ObjectGroup revision\nlet delete_request = DeleteObjectGroupRequest {\ngroup_id: \"&lt;object-group-id&gt;\".to_string(),\ncollection_id: \"&lt;collection-id&gt;\".to_string(),\nwith_revisions: false,\n};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = object_group_client.delete_object_group(delete_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <p>To fully delete an ObjectGroup with all its revisions use the parameter <code>with_revisions: true</code>.</p> <pre><code># Create tonic/ArunaAPI request to delete an ObjectGroup revision\nrequest = DeleteObjectGroupRequest(\n    group_id=\"&lt;object-group-id&gt;\",\n    collection_id=\"&lt;collection-id&gt;\",\n    with_revisions=True\n)\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.object_group_client.DeleteObjectGroup(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre> <p>To fully delete an ObjectGroup with all its revisions use the parameter <code>with_revisions=True</code>.</p>"},{"location":"get_started/basic_usage/08_How-To-EventNotification/","title":"How to use the EventNotification API","text":""},{"location":"get_started/basic_usage/08_How-To-EventNotification/#introduction","title":"Introduction","text":"<p>The AOS supports an event notification service which can be used to subscribe to specific resources. The subscription can be generally for every kind of modification of the resource or even specific actions.</p> <p>After subscription, you will receive mail notifications if something happens with the resource which fits your subscription conditions e.g. update or deletion.</p>"},{"location":"get_started/basic_usage/08_How-To-EventNotification/#subscribe","title":"Subscribe","text":"<p>Coming soon ...</p>  cURL Rust Python"},{"location":"get_started/basic_usage/08_How-To-EventNotification/#unsubscribe","title":"Unsubscribe","text":"<p>Coming soon ...</p>  cURL Rust Python"},{"location":"get_started/basic_usage/09_How-To-ServerInfo/","title":"How to use the StorageInfoService API","text":""},{"location":"get_started/basic_usage/09_How-To-ServerInfo/#introduction","title":"Introduction","text":"<p>To get general information about an AOS instance and its running components you can use the StorageInfoService API.</p> <p>Mainly, this can be either interesting for developers to know which versions they're dealing with or, for example, to  introduce a service health monitor with the current status of the instance.</p>"},{"location":"get_started/basic_usage/09_How-To-ServerInfo/#get-storage-version","title":"Get Storage Version","text":"<p>API example for fetching the versions of all components running in the specific AOS instance.</p> <p>Info</p> <p>This request does not need any specific permissions.</p>  cURL Rust Python <pre><code># Native JSON request to get AOS stoarge instance component versions \ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/info/version\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch component versions of the AOS instance\nlet get_request = GetStorageVersionRequest {};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = info_client.get_storage_version(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch component versions of the AOS instance\nrequest = GetStorageVersionRequest()\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.info_client.GetStorageVersion(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"get_started/basic_usage/09_How-To-ServerInfo/#get-storage-status","title":"Get Storage Status","text":"<p>API example for fetching current status of the AOS instance.</p> <p>The possible </p>  cURL Rust Python <pre><code># Native JSON request to get AOS stoarge instance status\ncurl -H 'Authorization: Bearer &lt;API_TOKEN&gt;' \\\n-H 'Content-Type: application/json' \\\n-X GET https://&lt;URL-to-AOS-instance-API-gateway&gt;/v1/info/status\n</code></pre> <pre><code>// Create tonic/ArunaAPI request to fetch the current status of the AOS instance\nlet get_request = GetStorageStatusRequest {};\n\n// Send the request to the AOS instance gRPC gateway\nlet response = info_client.get_storage_status(get_request)\n.await\n.unwrap()\n.into_inner();\n\n// Do something with the response\nprintln!(\"{:#?}\", response);\n</code></pre> <pre><code># Create tonic/ArunaAPI request to fetch the current status of the AOS instance\nrequest = GetStorageStatusRequest()\n\n# Send the request to the AOS instance gRPC gateway\nresponse = client.info_client.GetStorageStatus(request=request)\n\n# Do something with the response\nprint(f'{response}')\n</code></pre>"},{"location":"internal_data_structure/database_erd/","title":"Database ERD","text":"Aruna Object Storage (AOS) database entity-relationship diagram. Click for zoom."},{"location":"internal_data_structure/internal_data_structure/","title":"Internal Data Structure","text":"<p>UML diagram of the Aruna Object Storage data structure.</p>"},{"location":"internal_data_structure/internal_data_structure/#mandatory-resources","title":"Mandatory resources","text":""},{"location":"internal_data_structure/internal_data_structure/#project","title":"Project","text":"<p>Basic resource to organize general user access for all collections registered in the project. A project also acts as an umbrella container for one or multiple collections and has to be available before collection creation is possible.</p>"},{"location":"internal_data_structure/internal_data_structure/#collection","title":"Collection","text":"<p>Basic resource to organize stored data i.e. Objects. Collections can be described with more detailed metadata by registering one or multiple Object/s marked as \"specification\" of the Collection.</p> <p>Collections can also be versioned on-demand with a version number following semantic versioning principles. On creation of a collection version the collection a shallow cloned and immutable copy of the collection is created. The version number is defined manually by the user who pinpoints the Collection.</p>"},{"location":"internal_data_structure/internal_data_structure/#object","title":"Object","text":"<p>Resource which fundamentally stores the data in the backend storage system. An Object can only be owned by one collection at a time but references can be created for multiple collections. Depending on the context an Object can represent data or metadata. Additionally, an Object has revisions</p>"},{"location":"internal_data_structure/internal_data_structure/#state-system","title":"State system","text":"<p>Objects in the storage have states. These are used to indicate the status of an Object during its lifecycle.</p> INITIALIZING <p>After Object creation/initialization but before Object finishing.</p> AVAILABLE <p>After Object finishing if everything succeeded.</p> UNAVAILABLE <p>E.g. while an Object is being updated or generally in the staging area.</p> ERROR <p>If something went wrong e.g. data proxy endpoints are down.</p> TRASH <p>Object was deleted and waits to be removed by the garbage collector.</p>"},{"location":"internal_data_structure/internal_data_structure/#optional-resources","title":"Optional resources","text":""},{"location":"internal_data_structure/internal_data_structure/#labelhook","title":"Label/Hook","text":"<p>Simple resource which represents a key-value pair which is directly associated with a Collection, Object or ObjectGroup.</p> Labels <p>Used to describe short properties of the resource with which it is associated.</p> Hooks <p>Used to reference (external) services which automatically process/validate/... the data upon registration.</p>"},{"location":"internal_data_structure/internal_data_structure/#objectgroup","title":"ObjectGroup","text":"<p>ObjectGroups are a secondary resource to organize Objects inside Collections and describe the group with additional metadata.</p>"}]}